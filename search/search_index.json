{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Popochiu is a Godot addon that allows you to create point-and-click adventure games. It's inspired by Adventure Game Studio and PowerQuest Unity plugin. Features Works with Godot 3 and 4 (new development will happen for 4 only). Designed to offer a fast and easy-to-use workflow like Adventure Game Studio and PowerQuest. Provides a Godot Editor plugin, as well as the adventure game engine, specifically designed for adventure games. A powerful yet simple scripting API gives total control on characters, objects, inventory items, dialogues, etc. Autocomplete for scripting functions in Godot scripting editor. Suitable for high-resolution as well as retro-styled, classic games. Blends easily with Godot, allowing experienced devs to customize and extending the functions with ease. Easy management of animations, interactions, audio, game state, saves and load, and other commong game features. Additional tools for advanced workflows, like animation importers and the like. Very permissive license . Is Popochiu for me? Popochiu is for everyone, but it's particularly suitable for you if you : are in search for a developer-friendly engine, with a powerful scripting language want to work on top of a state-of-the-art, general-purpose game engine with a great community and support (Godot) want to build your game on OS different than Windows (Linux or MacOSX) want to release your game on different platforms (PC, mobile and consoles) love Free/Open-Source Software want to join a cheerful and welcoming community of fellow developers Popochiu may not be your cup of tea if : you are no coder and search for a visual editor like Adventure Creator you want to build games different from point-and-click adventures Yes, that's it. We can't imagine for what other reasons you shouldn't at least give Popochiu a try! :) Made with Popochiu The Maid Butcher Ritual by Skarmuse (Made for the G lobal G ame J am 2023) Popochius Little Adventure (AdvJam 2022) (in-development) | source code here Buggy Adventure (in-development) | source code here Pato & Lobo | source code here People Popochiu was created by Mateo @carenalga Robayo Rodr\u00edguez , who is the project's main maintainer and benevolent dictator. It is now co-maintained by Paolo @stickgrinder Pustorino and Whyshchuck with contributions by our wonderful community members. License Popochiu is released under the very permissive MIT License , suitable for free and commercial projects, no strings attached.","title":"Home"},{"location":"#features","text":"Works with Godot 3 and 4 (new development will happen for 4 only). Designed to offer a fast and easy-to-use workflow like Adventure Game Studio and PowerQuest. Provides a Godot Editor plugin, as well as the adventure game engine, specifically designed for adventure games. A powerful yet simple scripting API gives total control on characters, objects, inventory items, dialogues, etc. Autocomplete for scripting functions in Godot scripting editor. Suitable for high-resolution as well as retro-styled, classic games. Blends easily with Godot, allowing experienced devs to customize and extending the functions with ease. Easy management of animations, interactions, audio, game state, saves and load, and other commong game features. Additional tools for advanced workflows, like animation importers and the like. Very permissive license .","title":"Features"},{"location":"#is-popochiu-for-me","text":"Popochiu is for everyone, but it's particularly suitable for you if you : are in search for a developer-friendly engine, with a powerful scripting language want to work on top of a state-of-the-art, general-purpose game engine with a great community and support (Godot) want to build your game on OS different than Windows (Linux or MacOSX) want to release your game on different platforms (PC, mobile and consoles) love Free/Open-Source Software want to join a cheerful and welcoming community of fellow developers Popochiu may not be your cup of tea if : you are no coder and search for a visual editor like Adventure Creator you want to build games different from point-and-click adventures Yes, that's it. We can't imagine for what other reasons you shouldn't at least give Popochiu a try! :)","title":"Is Popochiu for me?"},{"location":"#made-with-popochiu","text":"The Maid Butcher Ritual by Skarmuse (Made for the G lobal G ame J am 2023) Popochius Little Adventure (AdvJam 2022) (in-development) | source code here Buggy Adventure (in-development) | source code here Pato & Lobo | source code here","title":"Made with Popochiu"},{"location":"#people","text":"Popochiu was created by Mateo @carenalga Robayo Rodr\u00edguez , who is the project's main maintainer and benevolent dictator. It is now co-maintained by Paolo @stickgrinder Pustorino and Whyshchuck with contributions by our wonderful community members.","title":"People"},{"location":"#license","text":"Popochiu is released under the very permissive MIT License , suitable for free and commercial projects, no strings attached.","title":"License"},{"location":"contributing-to-popochiu/","text":"","title":"Index"},{"location":"contributing-to-popochiu/coding-standards/","text":"Commit format TODO Coding standards TODO","title":"Coding standards"},{"location":"contributing-to-popochiu/coding-standards/#commit-format","text":"TODO","title":"Commit format"},{"location":"contributing-to-popochiu/coding-standards/#coding-standards","text":"TODO","title":"Coding standards"},{"location":"contributing-to-popochiu/getting-help/","text":"How to contact maintainers TODO Channels TODO Other policies TODO","title":"Getting help"},{"location":"contributing-to-popochiu/getting-help/#how-to-contact-maintainers","text":"TODO","title":"How to contact maintainers"},{"location":"contributing-to-popochiu/getting-help/#channels","text":"TODO","title":"Channels"},{"location":"contributing-to-popochiu/getting-help/#other-policies","text":"TODO","title":"Other policies"},{"location":"contributing-to-popochiu/project-management/","text":"Issue tracking TODO Code reviews TODO Branching model TODO Definition of Done TODO","title":"Project management"},{"location":"contributing-to-popochiu/project-management/#issue-tracking","text":"TODO","title":"Issue tracking"},{"location":"contributing-to-popochiu/project-management/#code-reviews","text":"TODO","title":"Code reviews"},{"location":"contributing-to-popochiu/project-management/#branching-model","text":"TODO","title":"Branching model"},{"location":"contributing-to-popochiu/project-management/#definition-of-done","text":"TODO","title":"Definition of Done"},{"location":"contributing-to-popochiu/project-overview/","text":"Popochiu Subsystems TODO Editor Plugin TODO Game Engine TODO","title":"Project overview"},{"location":"contributing-to-popochiu/project-overview/#popochiu-subsystems","text":"TODO","title":"Popochiu Subsystems"},{"location":"contributing-to-popochiu/project-overview/#editor-plugin","text":"TODO","title":"Editor Plugin"},{"location":"contributing-to-popochiu/project-overview/#game-engine","text":"TODO","title":"Game Engine"},{"location":"contributing-to-popochiu/toolchain-and-dependencies/","text":"Documentation TODO Plugin and Engine TODO","title":"Toolchain and dependencies"},{"location":"contributing-to-popochiu/toolchain-and-dependencies/#documentation","text":"TODO","title":"Documentation"},{"location":"contributing-to-popochiu/toolchain-and-dependencies/#plugin-and-engine","text":"TODO","title":"Plugin and Engine"},{"location":"getting-started/","text":"","title":"Index"},{"location":"getting-started/example-resources/","text":"Everything you need to start creating your adventure game with Popochiu is a good idea, game assets and the game script. When starting a new project, Popochiu will set it up for you but other than that, it will provide you with a blank slate so that you don't need to clean the stage from unwanted stuff. If you are testing or learning the engine, or if you suffer from writer's block, don't worry. We've got you covered! Example game We provided a very small game, to showcase how Popochiu works. You can find it here . The game contains the latest working version of Popochiu. You can use this starting point to explore, experiment and dissect the engine's basic functions. Clone it locally, mess with it as much as you want or just use it as a starting point for your next game, removing unwanted stuff and adding your one. If that's the way you want to Example assets Not quite there, yet We are planning to provide an asset pack to help you learn and improve, or kickstart your ideas, rapidly prototyping your game without stumbling on a walking cycle for days.","title":"Example resources"},{"location":"getting-started/example-resources/#example-game","text":"We provided a very small game, to showcase how Popochiu works. You can find it here . The game contains the latest working version of Popochiu. You can use this starting point to explore, experiment and dissect the engine's basic functions. Clone it locally, mess with it as much as you want or just use it as a starting point for your next game, removing unwanted stuff and adding your one. If that's the way you want to","title":"Example game"},{"location":"getting-started/example-resources/#example-assets","text":"Not quite there, yet We are planning to provide an asset pack to help you learn and improve, or kickstart your ideas, rapidly prototyping your game without stumbling on a walking cycle for days.","title":"Example assets"},{"location":"getting-started/getting-help/","text":"Join our community We do our best to keep this documentation relevant and up to date, but we know that some nuances and needs will go beyond what we can provide. That's where our community kicks in. Join Carenalgas Discord Server to get in touch with Popochiu's users and contributors. Passionate people and seasoned developers will be more than willing to help you, and we are sure you'll soon be in the position to give back. Before asking for help Check the documentation Head to the FAQ channel in the Popochius section Take a look at the error messages in Godot console and see if they help you figure out what's happening Popochiu has a very welcoming and cheerful community, full of very helpful people. These steps will save them the effort of answering the same questions over and over and will leave more space and resources to address non-trivial problems. Of course, if you don't understand something, there is nothing like a silly question! Feel free to ask for clarifications and share your feedback on our documentation and resources. How to ask for help You can ask for help on #general or in every channel that seems to fit the topic you need assistance with. Make your problem clear . Provide context and any relevant information to help others understand the problem. Add visuals (if relevant) . Whenever applicable, include screenshots, gifs, or videos to visually demonstrate the problem. Duly report errors , providing the full text or screenshot along with the steps you took leading up to the error. Don't push people to answer : Be patient and respectful. Avoid pushing for an immediate response. People in the community are all volunteering their time for free, at best effort. They will help you as soon as they can. Being polite and detailed greatly increases your chances of getting the help you need. Showing gratitude is optional, but very appreciated. Providing help We would like Carenalgas community to shine for the high quality of its discussions and mood. Everyone can help; nobody should feel forced to. Here are some behavioral guidelines to make sure everyone feels supported and welcome. Be clear when you explain steps or solutions to a problem, avoiding technical jargon whenever possible, to make your answer accessible to everyone. Encourage interaction , creating an environment where users feel comfortable seeking help. Be patient and remember that everyone has different levels of expertise, but... Point to documentation in a polite way (no \"RTFM\", please), remembering users that they should at least try to find solutions independently. Be positive and supportive , and let's celebrate other members' successes, no matter how small. GitHub If you found a bug or if you want to propose an improvement, GitHub is the place to head to. How to report a bug If you are reasonably sure you are hitting a bug, visit the project's issue tracker and search the list of all the planned or proposed changes to make sure nobody already reported the same problem. Tip Filtering the list by the bug tag can help, but please, perform a full-text search in case the problem has been mislabeled. If you discover that the bug has already been reported, read the description and the comments. They may contain useful information that can help you right away. In any case, leave a comment to confirm that you also are affected, providing additional details if you have some. If you can't find anything related to your problem, create a new issue, selecting the Bug report template. Follow the template guidance to provide the maintainers with the minimum set of information necessary to replicate the bug and observe the behavior. How to require a new feature, or propose a new idea Again, head to the project's issue tracker and search the list of all the planned or proposed changes to make sure nobody already required the same feature, or that it's not already planned. If you find a similar or related issue, please leave a comment with your thoughts, or a description of your use case, before opening a new feature. It may help to keep the big picture in a single discussion. If you can't find anything, create a new issue, then select the Feature request template. Fill in the required sections and try to be as descriptive as possible about your use case. Tip The core maintainers are doing their best to prioritize their work depending on the feedback and available information, organizing tasks in project milestones. You can take a glimpse of what's coming next by reviewing our roadmap . Note Contributing is not all about pushing code! Also consider reading our Contribution Guidelines , to learn all the ways you can help the project thrive. Godot community and docs Last but not least, keep in mind that Popochiu is a Godot plugin. One of our foundational design principles is to create a tool that enables users to craft their games knowing little to nothing about Godot. In practice, Godot does a lot of heavy lifting, so you can't really be unaware of how it works. If it's the first time you touch this engine, we suggest you take some time to learn Godot's basics . And of course, keep Godot's documentation always at hand.","title":"Getting help"},{"location":"getting-started/getting-help/#join-our-community","text":"We do our best to keep this documentation relevant and up to date, but we know that some nuances and needs will go beyond what we can provide. That's where our community kicks in. Join Carenalgas Discord Server to get in touch with Popochiu's users and contributors. Passionate people and seasoned developers will be more than willing to help you, and we are sure you'll soon be in the position to give back.","title":"Join our community"},{"location":"getting-started/getting-help/#before-asking-for-help","text":"Check the documentation Head to the FAQ channel in the Popochius section Take a look at the error messages in Godot console and see if they help you figure out what's happening Popochiu has a very welcoming and cheerful community, full of very helpful people. These steps will save them the effort of answering the same questions over and over and will leave more space and resources to address non-trivial problems. Of course, if you don't understand something, there is nothing like a silly question! Feel free to ask for clarifications and share your feedback on our documentation and resources.","title":"Before asking for help"},{"location":"getting-started/getting-help/#how-to-ask-for-help","text":"You can ask for help on #general or in every channel that seems to fit the topic you need assistance with. Make your problem clear . Provide context and any relevant information to help others understand the problem. Add visuals (if relevant) . Whenever applicable, include screenshots, gifs, or videos to visually demonstrate the problem. Duly report errors , providing the full text or screenshot along with the steps you took leading up to the error. Don't push people to answer : Be patient and respectful. Avoid pushing for an immediate response. People in the community are all volunteering their time for free, at best effort. They will help you as soon as they can. Being polite and detailed greatly increases your chances of getting the help you need. Showing gratitude is optional, but very appreciated.","title":"How to ask for help"},{"location":"getting-started/getting-help/#providing-help","text":"We would like Carenalgas community to shine for the high quality of its discussions and mood. Everyone can help; nobody should feel forced to. Here are some behavioral guidelines to make sure everyone feels supported and welcome. Be clear when you explain steps or solutions to a problem, avoiding technical jargon whenever possible, to make your answer accessible to everyone. Encourage interaction , creating an environment where users feel comfortable seeking help. Be patient and remember that everyone has different levels of expertise, but... Point to documentation in a polite way (no \"RTFM\", please), remembering users that they should at least try to find solutions independently. Be positive and supportive , and let's celebrate other members' successes, no matter how small.","title":"Providing help"},{"location":"getting-started/getting-help/#github","text":"If you found a bug or if you want to propose an improvement, GitHub is the place to head to.","title":"GitHub"},{"location":"getting-started/getting-help/#how-to-report-a-bug","text":"If you are reasonably sure you are hitting a bug, visit the project's issue tracker and search the list of all the planned or proposed changes to make sure nobody already reported the same problem. Tip Filtering the list by the bug tag can help, but please, perform a full-text search in case the problem has been mislabeled. If you discover that the bug has already been reported, read the description and the comments. They may contain useful information that can help you right away. In any case, leave a comment to confirm that you also are affected, providing additional details if you have some. If you can't find anything related to your problem, create a new issue, selecting the Bug report template. Follow the template guidance to provide the maintainers with the minimum set of information necessary to replicate the bug and observe the behavior.","title":"How to report a bug"},{"location":"getting-started/getting-help/#how-to-require-a-new-feature-or-propose-a-new-idea","text":"Again, head to the project's issue tracker and search the list of all the planned or proposed changes to make sure nobody already required the same feature, or that it's not already planned. If you find a similar or related issue, please leave a comment with your thoughts, or a description of your use case, before opening a new feature. It may help to keep the big picture in a single discussion. If you can't find anything, create a new issue, then select the Feature request template. Fill in the required sections and try to be as descriptive as possible about your use case. Tip The core maintainers are doing their best to prioritize their work depending on the feedback and available information, organizing tasks in project milestones. You can take a glimpse of what's coming next by reviewing our roadmap . Note Contributing is not all about pushing code! Also consider reading our Contribution Guidelines , to learn all the ways you can help the project thrive.","title":"How to require a new feature, or propose a new idea"},{"location":"getting-started/getting-help/#godot-community-and-docs","text":"Last but not least, keep in mind that Popochiu is a Godot plugin. One of our foundational design principles is to create a tool that enables users to craft their games knowing little to nothing about Godot. In practice, Godot does a lot of heavy lifting, so you can't really be unaware of how it works. If it's the first time you touch this engine, we suggest you take some time to learn Godot's basics . And of course, keep Godot's documentation always at hand.","title":"Godot community and docs"},{"location":"getting-started/installing-popochiu/","text":"Tip Popochiu works on Godot 3.3 and later versions, but we recommend kickstarting new projects on Godot 4, with Popochiu 2.0. Get Godot Download the latest version of the engine here . Extract the Godot executable file ( .exe on Windows) and place it in a directory of your choice. Run the Godot executable. Create a new project by clicking the New project button. Give it a name and then click on Create folder . Click on Create and Edit to launch the editor. Get Popochiu From the asset store TODO: Complete this From Itch Download Popochiu from its itch.io page Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin in the Project > Project Settings menu, Plugins tab (at the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project . From GitHub Download the latest release from GitHub . Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin: Project > Project Settings... > Plugins (the tab on the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project . If you installed Popochiu properly, you'll see the Main Dock at the right, and this message in the Output panel. [es] Est\u00e1s usando Popochiu, un plugin para crear juegos point n' click [en] You're using Popochiu, a plugin for making point n' click games \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 \\( o )3(o)/ \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592","title":"Installing popochiu"},{"location":"getting-started/installing-popochiu/#get-godot","text":"Download the latest version of the engine here . Extract the Godot executable file ( .exe on Windows) and place it in a directory of your choice. Run the Godot executable. Create a new project by clicking the New project button. Give it a name and then click on Create folder . Click on Create and Edit to launch the editor.","title":"Get Godot"},{"location":"getting-started/installing-popochiu/#get-popochiu","text":"","title":"Get Popochiu"},{"location":"getting-started/installing-popochiu/#from-the-asset-store","text":"TODO: Complete this","title":"From the asset store"},{"location":"getting-started/installing-popochiu/#from-itch","text":"Download Popochiu from its itch.io page Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin in the Project > Project Settings menu, Plugins tab (at the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project .","title":"From Itch"},{"location":"getting-started/installing-popochiu/#from-github","text":"Download the latest release from GitHub . Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin: Project > Project Settings... > Plugins (the tab on the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project . If you installed Popochiu properly, you'll see the Main Dock at the right, and this message in the Output panel. [es] Est\u00e1s usando Popochiu, un plugin para crear juegos point n' click [en] You're using Popochiu, a plugin for making point n' click games \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 \\( o )3(o)/ \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592","title":"From GitHub"},{"location":"getting-started/tutorials/","text":"Tutorials Creating a game stub : This step-by-step tutorial will guide you to learn the very basics of Popochiu, providing a lot of explanations along the way. Video Tutorials The following video tutorials (English subs) are available for Popochiu 1: How to setup your project, create a room and a character What are the baselines, how to create gaps and how to use Hotspots How to create Props with interaction and inventory items How to create dialog trees How to enable/disable dialog options and use inventory items on characters, Props and Hotspots How to setup a room bigger than the game window, and how to move between rooms How to add sound effects, music, voices, and graphic interface sounds","title":"Tutorials"},{"location":"getting-started/tutorials/#tutorials","text":"Creating a game stub : This step-by-step tutorial will guide you to learn the very basics of Popochiu, providing a lot of explanations along the way.","title":"Tutorials"},{"location":"getting-started/tutorials/#video-tutorials","text":"The following video tutorials (English subs) are available for Popochiu 1: How to setup your project, create a room and a character What are the baselines, how to create gaps and how to use Hotspots How to create Props with interaction and inventory items How to create dialog trees How to enable/disable dialog options and use inventory items on characters, Props and Hotspots How to setup a room bigger than the game window, and how to move between rooms How to add sound effects, music, voices, and graphic interface sounds","title":"Video Tutorials"},{"location":"getting-started/creating-a-game-stub/","text":"","title":"Index"},{"location":"getting-started/creating-a-game-stub/add-an-inventory-item/","text":"Add an inventory item The inventory is where your player will collect all items that will be useful to progress in your game. In Popochiu, inventory items are global objects, like rooms or characters. They have a script, to hold all the game logic related to them, and a texture, so that they can be rendered somewhere in the GUI. To create a new inventory item click on the Create Inventory Item button in the tab room of the Popochiu dock ( 32 ), and name the new item in the popup window that appears. We'll name our new inventory item \" ToyCar \", because we are going to make the prop we just created collectible. Go on and click OK. Popochiu will open the new inventory item's scene in the editor. Inventory items are very simple. They have no interaction polygons or similar because representing them in an interactive grid of sorts is the responsibility of the GUI. The only thing we need to do is to assign a texture to them, that will be painted in the inventory GUI by Popochiu. If you don't have a sprite ready for your inventory item, you can download this one from the demo game. Save it into your project, in the game/inventory_items/<your inventory item name>/inv_toy_car.png folder, and rename it as you see fit. Assigning the texture to the inventory item is done the same as props, by dragging the image from the FileSystem to the Texture property in the inspector ( 33 ). That's it. Your inventory item is configured and it is now possible to add it to the main character's inventory. We are going to script this part by interacting with the toy car prop we placed in our room. Go back to the room scene (you can press the Open in Editor button on the \" House \" room row in Popochiu's main dock) and use the room tab to open the \" ToyCar \" prop script. If you've followed along, you will see that we just scripted the examine interaction for it, implementing the _on_right_click() function. It's now time to write an _on_click() function that allows us to pick the prop up and add it to the inventory. # When the node is clicked func _on_click() -> void: await C.player.walk_to_clicked() await C.player.face_clicked() await C.player.say(\"Better picking them up, before I trip over it!\") R.get_prop(\"ToyCar\").hide() I.ToyCar.add() Save the project and run the game. Now if you click on the toy car on the floor, the main character will say its line, and then the item will disappear from the scene and appear in the inventory. Warning It's worth clarifying a couple of things that may be misleading. The fact that the inventory item exists in Popochiu catalog does not mean it is automatically available in the character's inventory: quite the opposite, we want to create many inventory items that the character will collect as the player makes progress throughout the game. If you paid attention to the code, you should have noticed that there is no connection between the ToyCar prop and the ToyCar inventory item . Since they represent the same object in the game world, they have the same name and a very similar texture. This makes sense to us as human beings, but for Popochiu the two objects are completely unrelated . Indeed, our script is telling the engine to hide a prop that's in the room, and then to add an inventory item to the character's inventory. The prop is still there, just disabled. But why not just have a \"collectible\" prop? Well, the reason is that, although the most common way to collect objects is \"picking them up\", there are so many other ways. You may want to add an item to the inventory when the character opens a drawer (implying that he found something in there), or maybe during a dialog with another character (implying that it has been given by someone for a reason). Or maybe you just want the character to win loot after a successful action. Popochiu does not force a specific game structure on you. Of course, it provides sensible defaults for the staples of the genre, but it gives you the tools to build the adventure you want to build. Tip Despite what we just said Popochiu does provide a way to automatically hide a prop when it's collected. Populate the Link to item property in the inspector with the name of the inventory item that corresponds to that prop. When the item is added to the character's inventory, the engine will remove the corresponding prop from the stage for you. Magic! Note See how the last two lines of the _on_click() function are not await -ed? The reason is that those functions are just changing the state of the game, without triggering animations, or dialogs. To learn if a function must be awaited, the best option is to check in the API reference section. As a rule of thumb, if the function \"is not making something happen on the screen as it was in a movie\" (animating, moving stuff around, printing text... everything that needs time to be seen), then it probably doesn't need to be awaited.","title":"Add an inventory item"},{"location":"getting-started/creating-a-game-stub/add-an-inventory-item/#add-an-inventory-item","text":"The inventory is where your player will collect all items that will be useful to progress in your game. In Popochiu, inventory items are global objects, like rooms or characters. They have a script, to hold all the game logic related to them, and a texture, so that they can be rendered somewhere in the GUI. To create a new inventory item click on the Create Inventory Item button in the tab room of the Popochiu dock ( 32 ), and name the new item in the popup window that appears. We'll name our new inventory item \" ToyCar \", because we are going to make the prop we just created collectible. Go on and click OK. Popochiu will open the new inventory item's scene in the editor. Inventory items are very simple. They have no interaction polygons or similar because representing them in an interactive grid of sorts is the responsibility of the GUI. The only thing we need to do is to assign a texture to them, that will be painted in the inventory GUI by Popochiu. If you don't have a sprite ready for your inventory item, you can download this one from the demo game. Save it into your project, in the game/inventory_items/<your inventory item name>/inv_toy_car.png folder, and rename it as you see fit. Assigning the texture to the inventory item is done the same as props, by dragging the image from the FileSystem to the Texture property in the inspector ( 33 ). That's it. Your inventory item is configured and it is now possible to add it to the main character's inventory. We are going to script this part by interacting with the toy car prop we placed in our room. Go back to the room scene (you can press the Open in Editor button on the \" House \" room row in Popochiu's main dock) and use the room tab to open the \" ToyCar \" prop script. If you've followed along, you will see that we just scripted the examine interaction for it, implementing the _on_right_click() function. It's now time to write an _on_click() function that allows us to pick the prop up and add it to the inventory. # When the node is clicked func _on_click() -> void: await C.player.walk_to_clicked() await C.player.face_clicked() await C.player.say(\"Better picking them up, before I trip over it!\") R.get_prop(\"ToyCar\").hide() I.ToyCar.add() Save the project and run the game. Now if you click on the toy car on the floor, the main character will say its line, and then the item will disappear from the scene and appear in the inventory. Warning It's worth clarifying a couple of things that may be misleading. The fact that the inventory item exists in Popochiu catalog does not mean it is automatically available in the character's inventory: quite the opposite, we want to create many inventory items that the character will collect as the player makes progress throughout the game. If you paid attention to the code, you should have noticed that there is no connection between the ToyCar prop and the ToyCar inventory item . Since they represent the same object in the game world, they have the same name and a very similar texture. This makes sense to us as human beings, but for Popochiu the two objects are completely unrelated . Indeed, our script is telling the engine to hide a prop that's in the room, and then to add an inventory item to the character's inventory. The prop is still there, just disabled. But why not just have a \"collectible\" prop? Well, the reason is that, although the most common way to collect objects is \"picking them up\", there are so many other ways. You may want to add an item to the inventory when the character opens a drawer (implying that he found something in there), or maybe during a dialog with another character (implying that it has been given by someone for a reason). Or maybe you just want the character to win loot after a successful action. Popochiu does not force a specific game structure on you. Of course, it provides sensible defaults for the staples of the genre, but it gives you the tools to build the adventure you want to build. Tip Despite what we just said Popochiu does provide a way to automatically hide a prop when it's collected. Populate the Link to item property in the inspector with the name of the inventory item that corresponds to that prop. When the item is added to the character's inventory, the engine will remove the corresponding prop from the stage for you. Magic! Note See how the last two lines of the _on_click() function are not await -ed? The reason is that those functions are just changing the state of the game, without triggering animations, or dialogs. To learn if a function must be awaited, the best option is to check in the API reference section. As a rule of thumb, if the function \"is not making something happen on the screen as it was in a movie\" (animating, moving stuff around, printing text... everything that needs time to be seen), then it probably doesn't need to be awaited.","title":"Add an inventory item"},{"location":"getting-started/creating-a-game-stub/conclusions/","text":"Conclusions It has been a long journey, and we learned a lot. We know how to: Setup a game in Popochiu Select a GUI among the available ones Create locations for our characters to explore Add characters to our game and make them interact with dialogues and actions Move and control our game character Add interactions to our locations, both via hotspots and actual props Collect and get rid of stuff in the inventory We can create interesting, dynamic dialogues These are the basics of every adventure game and an inch of what Popochiu can do for you. We hope that this appetizer was enough to understand if Popochiu is the game engine that you need for your project, and that you are enticed to learn more! Homeworks If you want to tinker with this first game a bit, get your hands dirty and learn by doing, here is a list of assignments you can try to solve by yourself, with some hints in case you get lost. Add a prop and an inventory item Add a cabinet with a drawer to the scene and a key as an inventory item. When the character interacts with the cabinet, it says something about having found a key in the drawer and the key is added to the inventory Hint Find the sprites for the key and the cabinet in the example project GitHub repository. Prevent losing the key If the player tries to give the key to Popsy, the main character will say something to make clear it doesn't want to give away the key. Hint Introduce another block dedicated to the new inventory item in _on_item_used() for Popsy character. Solve a problem with the implemented dialog If you start the game, give the toy car to Popsy, then talk to him and select the line about the messy room, the line \"Popsy, are you bored?\" will appear again. That's a bug, Popsy already has its toy. Find a way to fix this. Hint You can tie the \"give toy car\" action to the state of the second dialog line (so that the main character refuses to give Popsy the toy unless it knows that the little one is bored). Or you can disable the second line forever so even after exploring the first line of dialogue, it will never pop up again; there is a way to achieve this, find it ;) What's next Now that you've broken the ice with the basic concepts, you can learn more. Go and get our example resources to learn directly from code and find a quick start in your experimentation. Throughout this guide, we've given you a taste of the plugin interface, but you may want to learn everything there is to know about Popochiu's editor functions, by reading the editor handbook . At the same time, the engine (the part of Popochiu that will ship with your game) deserves its own deep dive. Read the engine handbook and keep the scripting API reference at hand while you code your game. This tutorial overlooks many important parts, among which animations and audio management certainly stand out. The How to Develop a Game section contains basics and advanced techniques that will help you get the most out of Godot and Popochiu. Last but not least, Popochiu is a community effort. Learn how to get help and, if you feel like contributing, read our contribution guidelines .","title":"Conclusions"},{"location":"getting-started/creating-a-game-stub/conclusions/#conclusions","text":"It has been a long journey, and we learned a lot. We know how to: Setup a game in Popochiu Select a GUI among the available ones Create locations for our characters to explore Add characters to our game and make them interact with dialogues and actions Move and control our game character Add interactions to our locations, both via hotspots and actual props Collect and get rid of stuff in the inventory We can create interesting, dynamic dialogues These are the basics of every adventure game and an inch of what Popochiu can do for you. We hope that this appetizer was enough to understand if Popochiu is the game engine that you need for your project, and that you are enticed to learn more!","title":"Conclusions"},{"location":"getting-started/creating-a-game-stub/conclusions/#homeworks","text":"If you want to tinker with this first game a bit, get your hands dirty and learn by doing, here is a list of assignments you can try to solve by yourself, with some hints in case you get lost.","title":"Homeworks"},{"location":"getting-started/creating-a-game-stub/conclusions/#add-a-prop-and-an-inventory-item","text":"Add a cabinet with a drawer to the scene and a key as an inventory item. When the character interacts with the cabinet, it says something about having found a key in the drawer and the key is added to the inventory Hint Find the sprites for the key and the cabinet in the example project GitHub repository.","title":"Add a prop and an inventory item"},{"location":"getting-started/creating-a-game-stub/conclusions/#prevent-losing-the-key","text":"If the player tries to give the key to Popsy, the main character will say something to make clear it doesn't want to give away the key. Hint Introduce another block dedicated to the new inventory item in _on_item_used() for Popsy character.","title":"Prevent losing the key"},{"location":"getting-started/creating-a-game-stub/conclusions/#solve-a-problem-with-the-implemented-dialog","text":"If you start the game, give the toy car to Popsy, then talk to him and select the line about the messy room, the line \"Popsy, are you bored?\" will appear again. That's a bug, Popsy already has its toy. Find a way to fix this. Hint You can tie the \"give toy car\" action to the state of the second dialog line (so that the main character refuses to give Popsy the toy unless it knows that the little one is bored). Or you can disable the second line forever so even after exploring the first line of dialogue, it will never pop up again; there is a way to achieve this, find it ;)","title":"Solve a problem with the implemented dialog"},{"location":"getting-started/creating-a-game-stub/conclusions/#whats-next","text":"Now that you've broken the ice with the basic concepts, you can learn more. Go and get our example resources to learn directly from code and find a quick start in your experimentation. Throughout this guide, we've given you a taste of the plugin interface, but you may want to learn everything there is to know about Popochiu's editor functions, by reading the editor handbook . At the same time, the engine (the part of Popochiu that will ship with your game) deserves its own deep dive. Read the engine handbook and keep the scripting API reference at hand while you code your game. This tutorial overlooks many important parts, among which animations and audio management certainly stand out. The How to Develop a Game section contains basics and advanced techniques that will help you get the most out of Godot and Popochiu. Last but not least, Popochiu is a community effort. Learn how to get help and, if you feel like contributing, read our contribution guidelines .","title":"What's next"},{"location":"getting-started/creating-a-game-stub/create-characters/","text":"Create characters Characters are one of the basic elements of Popochiu, being the bread and butter of every adventure game. Let's start creating the player character. In the Popochiu main dock, click the Create character button ( 1 ). A popup will appear, asking for the character name. This is the machine name of your character, not the one the player will see ingame, and it needs to be written in PascalCase (no spaces or punctuation and all capitalized words). Once you entered the name, click the OK button ( 2 ). As you can see the editor is giving you a preview of the files and assets that will be created. If everything went well, your editor should look like this now: The new character appears in the main dock list ( 3 ) and the related scene is open in the editor ( 4 ). Now click on the scene's root node (it should be named Character<YourCharacterName> ) to access the character's properties in the inspector: Set the Flips when parameter ( 5 ) to Looking Left , and leave the rest untouched. Warning The suggested value is based on the example sprite direction (right). If you are using a self-made sprite for your character and it's facing left, you should set this property to Looking right instead. The character scene shows nothing. That's because we've set no sprite for our character. Popochiu characters support a full set of standard and custom animations, but since we are only stubbing the game, we'll just set a static sprite for now. If you don't have a sprite sheet ready for your character, you can download this one from the demo game. Save it into your project, in the game/characters/<your character name>/ folder, and rename it as you see fit. Tip You can save the spritesheet anywhere in your project, but keeping it in the Character folder makes the project structure more tidy and maintainable. You may want to create subfolders to organize assets, but we strongly advise starting simple and reorganizing only when it's necessary. To set the character sprite, go back to your editor and select the Sprite2D node in your character's scene ( 6 ), then locate your sprite sheet filename in your file manager ( 7 ). Select and drag it to the Texture property in the inspector ( 8 ). You can see from the screenshot that the entire image is now visible in the Character scene. Of course, we want to select just a single sprite from the sprite sheet. For that, head to the Animation section in the inspector and set Hframes and Vframes values to match the number of sprites in the sprite sheet, like this ( 9 ): Now the sprite on the scene should be OK, showing your character in the standing position. We just miss a little change to make things work as intended: when a new character is created, its sprite is centered on the scene origin: This is a problem because the scene origin point is the one that the engine will check to understand if the character is still inside a walking area, or if it reached a certain position when moving around the scene. In short, the scene origin should be where the character's feet are. Fixing this is as simple as selecting the Sprite2D node in the character scene ( 10 ), and moving it so that the origin is in between the two feet, like in the image below. Tips for great character sprite positioning Most game characters' idle position is depicted in a three-quarter view. In this type of shot, the foot facing the camera will be slightly lower than the foot pointing to the side of the sprite (look at Goddiu above). To achieve perfect results when positioning your sprite, you should position the side-facing foot on the zero line, and the camera-facing foot toe should be a bit lower. In the case of floating characters (ghosts, fairies, anti-gravity-powered mad scientists, etc), you should leave some vertical space between the scene's center and your character. Try to envision the scene line as the \"floor\" and decide how high above the floor the character should float. The last thing to do is to position the place where the dialog text will be shown for the talking character. Popochiu can be customized to show dialog lines in many different positions or fashions, but its default is to show the dialogue lines somewhere above the character's head. Since the engine doesn't know how high your sprite is (see \"Under the hood\" note below), that's for you to decide. Just select the DialogPos node in the scene tree ( 11 ). A small cross will be highlighted in the scene's origin. Drag it somewhere above the character's head (or wherever makes sense to you). This may require a bit of experimentation, but for now, this will do. Under the hood You may be wondering how exactly the text is positioned in relation to the DialogPos node. Here is an explanation of how Popochiu decides how your text is rendered. The baseline of the text will always match the vertical position of DialogPos , so the text will be rendered vertically right above that point. The dialog line length is calculated and the text is centered on the horizontal position of DialogPos , so the text will be rendered horizontally around that point. If the text spans multiple lines, Popochiu will expand it towards the top , so that it doesn't cover your character (this means if you want your text under the character for some reason, multiple lines will cover your character). If the character is near the window or screen border, the text will be repositioned so that it will be entirely visible, so you don't have to worry about it becoming unreadable. This is true both for horizontal and vertical coordinates. Add another character We are almost done creating our player character. Before moving on, follow the same steps to create another one, to keep our main character company and test some interaction. Tip In the example game, the second character is named Popsy and its sprite can be found here . Select the main character Now that we have two characters, it's time to tell Popochiu which one will be our main character. That's the one that will be used by the player. To do this, locate the first character you have created in Popochiu main dock (in our example it was Goddiu ), open the drop-down menu, and select Set as Player Character ( 12 ). Multiple character games Even if we are not going to cover this detail, Popochiu supports multiple player characters in the style of Maniac Mansion or Day of the Tentacle . It's as easy as programmatically changing a variable from your scripts. Pat yourself a shoulder! You have successfully created your first characters.","title":"Create characters"},{"location":"getting-started/creating-a-game-stub/create-characters/#create-characters","text":"Characters are one of the basic elements of Popochiu, being the bread and butter of every adventure game. Let's start creating the player character. In the Popochiu main dock, click the Create character button ( 1 ). A popup will appear, asking for the character name. This is the machine name of your character, not the one the player will see ingame, and it needs to be written in PascalCase (no spaces or punctuation and all capitalized words). Once you entered the name, click the OK button ( 2 ). As you can see the editor is giving you a preview of the files and assets that will be created. If everything went well, your editor should look like this now: The new character appears in the main dock list ( 3 ) and the related scene is open in the editor ( 4 ). Now click on the scene's root node (it should be named Character<YourCharacterName> ) to access the character's properties in the inspector: Set the Flips when parameter ( 5 ) to Looking Left , and leave the rest untouched. Warning The suggested value is based on the example sprite direction (right). If you are using a self-made sprite for your character and it's facing left, you should set this property to Looking right instead. The character scene shows nothing. That's because we've set no sprite for our character. Popochiu characters support a full set of standard and custom animations, but since we are only stubbing the game, we'll just set a static sprite for now. If you don't have a sprite sheet ready for your character, you can download this one from the demo game. Save it into your project, in the game/characters/<your character name>/ folder, and rename it as you see fit. Tip You can save the spritesheet anywhere in your project, but keeping it in the Character folder makes the project structure more tidy and maintainable. You may want to create subfolders to organize assets, but we strongly advise starting simple and reorganizing only when it's necessary. To set the character sprite, go back to your editor and select the Sprite2D node in your character's scene ( 6 ), then locate your sprite sheet filename in your file manager ( 7 ). Select and drag it to the Texture property in the inspector ( 8 ). You can see from the screenshot that the entire image is now visible in the Character scene. Of course, we want to select just a single sprite from the sprite sheet. For that, head to the Animation section in the inspector and set Hframes and Vframes values to match the number of sprites in the sprite sheet, like this ( 9 ): Now the sprite on the scene should be OK, showing your character in the standing position. We just miss a little change to make things work as intended: when a new character is created, its sprite is centered on the scene origin: This is a problem because the scene origin point is the one that the engine will check to understand if the character is still inside a walking area, or if it reached a certain position when moving around the scene. In short, the scene origin should be where the character's feet are. Fixing this is as simple as selecting the Sprite2D node in the character scene ( 10 ), and moving it so that the origin is in between the two feet, like in the image below. Tips for great character sprite positioning Most game characters' idle position is depicted in a three-quarter view. In this type of shot, the foot facing the camera will be slightly lower than the foot pointing to the side of the sprite (look at Goddiu above). To achieve perfect results when positioning your sprite, you should position the side-facing foot on the zero line, and the camera-facing foot toe should be a bit lower. In the case of floating characters (ghosts, fairies, anti-gravity-powered mad scientists, etc), you should leave some vertical space between the scene's center and your character. Try to envision the scene line as the \"floor\" and decide how high above the floor the character should float. The last thing to do is to position the place where the dialog text will be shown for the talking character. Popochiu can be customized to show dialog lines in many different positions or fashions, but its default is to show the dialogue lines somewhere above the character's head. Since the engine doesn't know how high your sprite is (see \"Under the hood\" note below), that's for you to decide. Just select the DialogPos node in the scene tree ( 11 ). A small cross will be highlighted in the scene's origin. Drag it somewhere above the character's head (or wherever makes sense to you). This may require a bit of experimentation, but for now, this will do. Under the hood You may be wondering how exactly the text is positioned in relation to the DialogPos node. Here is an explanation of how Popochiu decides how your text is rendered. The baseline of the text will always match the vertical position of DialogPos , so the text will be rendered vertically right above that point. The dialog line length is calculated and the text is centered on the horizontal position of DialogPos , so the text will be rendered horizontally around that point. If the text spans multiple lines, Popochiu will expand it towards the top , so that it doesn't cover your character (this means if you want your text under the character for some reason, multiple lines will cover your character). If the character is near the window or screen border, the text will be repositioned so that it will be entirely visible, so you don't have to worry about it becoming unreadable. This is true both for horizontal and vertical coordinates.","title":"Create characters"},{"location":"getting-started/creating-a-game-stub/create-characters/#add-another-character","text":"We are almost done creating our player character. Before moving on, follow the same steps to create another one, to keep our main character company and test some interaction. Tip In the example game, the second character is named Popsy and its sprite can be found here .","title":"Add another character"},{"location":"getting-started/creating-a-game-stub/create-characters/#select-the-main-character","text":"Now that we have two characters, it's time to tell Popochiu which one will be our main character. That's the one that will be used by the player. To do this, locate the first character you have created in Popochiu main dock (in our example it was Goddiu ), open the drop-down menu, and select Set as Player Character ( 12 ). Multiple character games Even if we are not going to cover this detail, Popochiu supports multiple player characters in the style of Maniac Mansion or Day of the Tentacle . It's as easy as programmatically changing a variable from your scripts. Pat yourself a shoulder! You have successfully created your first characters.","title":"Select the main character"},{"location":"getting-started/creating-a-game-stub/create-the-first-room/","text":"Create the first room Now that we have two characters, it's time to create a location for them to interact with. In Popochiu, game locations are referred to as rooms . More broadly, a room can serve as any game screen, including splash screens, menus, or close-ups. Not all rooms need to feature characters, and the main character may be rendered invisible in specific rooms. To create our first room, just click the Create room button in Popochiu's main dock ( 13 ). A popup will appear, very similar to the one to create a new character. This time, an additional checkbox is available. This allows us to set the newly created room as the main scene of the Godot project. Check it out so we don't have to do it later. This scene will also be the only room in this game stub. Name the new room whatever you want. If you want to follow along, let's name this room \" House \" and make it the main scene. Popochiu will create the new room, open the room scene in the editor, and open the corresponding Room tab in the plugin interface. Much like a character, a room needs a sprite to represent the background of the location. We are going to use this background from the example game. But hey! The room has nothing like a sprite in it! Quite the opposite, the scene tree seems to be pretty empty: Unlike other objects in Popochiu, rooms are containers for other more specialized objects, the most important of which are Props . Props are every visible part of a location, used to make the environment believable. They can go from a small collectable item, all the way to location backgrounds. Under the hood Popochiu makes no distinction based on the prop function in the game, it knows little about that. You add as many as you want into a scene and interact with them via your game script. The only thing the engine knows about props is their visibility and their clickability . By flagging those two properties on or off, you can switch objects in and out of a location, and make them interactive. Armed with this knowledge, it's now clear we must create a prop to hold our background. That's easy. If you followed the steps above, Popochiu dock should be showing the Home room tab. Click the Create prop button and as usual, a new window will pop up: Name the new prop \" Background \" and leave the \"Will have interaction?\" option unchecked. You don't want all of your screen to react to clicks when you move around. Note Moving around the screen doesn't require the background or anything else to be interactive. Popochiu will take care of moving the character for you when you click on a non-interactive area. Go on to learn how to constraint character movement to the right zones. Click OK and your prop will be created. You should see it in the scene tree, under the Props grouping node. The inspector should look something like this: Now you can see the Prop has a Texture parameter. By this time you should be able to figure out what to do. Save the downloaded background sprite in the game/rooms/house/props/background/ folder, then drag it from Godot Editor file manager to the field in the inspector. Your scene should now show the background image. At this point you have a main character and a main scene defined. These are the minimum steps needed to run a Popochiu game. Treat yourself after all this effort, by hitting the Run button at the top right of the editor and seeing your game in action. If you did everything right, you should see your main character standing in the center of the room. Clicking on the screen will flip the character so that it faces the cursor coordinates. Note If you followed this tutorial from the start, when you run the game Popochiu will complain about not found animations. Don't worry about those errors, we didn't include animations to keep this introduction short. Rest assured though that Popochiu has full animation support: it already manages standard animations (for an idle character, for walking and for talking), without having to write any code. A game dev can add a full set of custom animations to play during cutscenes or to support different emotions in dialogues, and so on. For those who work with Aseprite , Popochiu also provides a powerful automated importer that will make creating rooms and characters a breeze and will enable a fast iterative development workflow. Learn more about animations . Learn more about the Aseprite importers Add a Walkable Area Our character is standing there in the middle of the room, doing nothing. If we click on the screen we would expect it to walk to the clicked location, but that's not happening. The reason is that we defined no areas in which the character is allowed to move. Popochiu refers to those elements as Walkable Areas . They are objects that can live only inside rooms, and each room can have more than one (see the box below for an explanation). For now, let's create a single walkable area representing the room floor. In the Room tab of Popochiu dock, click the Create walkable area button ( 16 ). In the popup window, just name your new walkable area \" Floor \" (or whatever you find descriptive enough). Click OK and a new element will be added to the scene. Selecting the Perimeter node in the scene tree ( 17 ) to highlight a squared polygon in the center of the scene. Now you have to adjust the vertices of that polygon ( 18 ) to whatever makes sense. Tip To adjust the polygon, just click and drag the vertice handles around. It's quite intuitive, but you can add vertices to the polygon by clicking anywhere along a segment. When you have adjusted your walkable area, it should look something like this: Save the project and run your game. Your character should now be able to move around the room, without leaving the area you defined. Note If you aren't new to Godot, you may think we forgot to mention the Bake NavigationPolygon** button in the toolbar ( 19 ). That's not the case, Popochiu bakes the polygon for you. Tip You usually don't want your walkable area to cover the entire floor that you painted, or your character will be able to stand on the very border of it, too near the wall, creating a terrible effect. Remember that Popochiu will stop the movement as soon as the origin point of your character scene reaches one of the walkable area borders. Additional walkable areas It may not be obvious but you may want (or need) a room to have more than a single walkable area. Here are some example cases: A location with two areas separated by an obstacle (like a chasm), that the character can enter both sides. A location with different levels, the character can climb to or reach depending on the game script or specific conditions. A location with a large prop that can be removed (like a pile of fallen rocks): when the prop is removed a larger walkable area is used in place of the smaller one. Since you can define which walkable area is the active one for the character from your scripts, having multiple walkable areas unlocks a lot of possibilities for complex locations. Add a hotspot Our character can now move around the room, but there is little it can do. It is time to add some interaction. A hotspot is the most basic form of interaction you can have in a room. It is just an area of the screen, delimited by a polygon drawn at a specific position, that has a name and a script attached to it. It has no sprite of its own, it just sits there on top of other elements, waiting to react to the cursor. By means of its script, it can react to events like mouse clicks. That's exactly what we're going to do. Creating a hotspot is much like creating a walkable area. In the Room tab of Popochiu dock, click the Create hotspot button ( 20 ). In the popup window, just name your new hotspot \" Window \" (or whatever you find descriptive enough). Click OK and a new element will be added to the scene. When you select the new hotspot in the scene tree ( 21 ), a bunch of gizmos are shown in the scene preview. We are going to interactively edit three important properties of the hotspot (the interaction polygon , the baseline and the walk-to point ) by using the dedicated buttons in the toolbar ( 23 ). Info Walk-to point , Baseline and Interaction Polygon properties are all common to clickable objects like Hotspots, Props and Characters. First of all, click the Interaction Polygon button to show the handles of the standard square polygon for the hotspot. This is basically the same as the walkable area polygon but instead of limiting the character movements, this polygon will just react when the cursor hovers it. Let's draw a shape around the window on the wall: No need to be too precise or polished, rough edges won't be perceivable while playing your game. You just need to avoid, if possible, overlapping with other hotspots (see \" Baseline \" below, to understand how polygon overlapping works). Another important property of the hotspot is the \" Walk to point\", which is the coordinates that the character will reach when you click over the hotspot. You can set these coordinates interactively by clicking on the \"_Walk-to point \" button in the toolbar. A squared marker will appear in the center of the screen. You can drag the marker wherever you want in the room. For our example room, we'll set the following coordinates for the Window hotspot: x : -30 y : -10 so that our main character will walk beside the window. The last property that you want to set is the Baseline . The baseline is simply a coordinate on the Y axis, that represents a point in the imaginary space of the room. If the main character walks above the baseline ( above means the character's origin has a Y coordinate that's lower than the baseline value), it is considered behind the object (in this case the hotspot). If the character origin is below the baseline, it is considered in front of the object. Warning This becomes evident when you have a prop or a character in a room, and you want your main character to walk behind them when its feet are \"farther away\" from the camera, but a hotspot has no sprite to walk behind, so you may think setting the baseline is useless. That's not the case at all. If you don't set your baseline the right way, the polygon-delimited area of the hotspot may remain clickable even when the character is in front of it; or the other way around, a hotspot that should always be in front of the scene, may be covered by your character, making it unreachable. So, always set your baseline. Our window is in the back of the room and the main character has no way to be placed behind it, so we'll set the hotspot baseline to 0 (zero). This means that the baseline is \"as high as the scene\". The character has no way to walk so high. Info Note that you can set the baseline even to negative values. This is what Popochiu automatically does when you name your prop Background or bg , to make sure your background is always at the very back of the scene. Keep this in mind too, if you change the baseline of other elements programmatically (via a script). Tip If you need pixel-perfect precision, you can set the baseline and the hotspot's Walk to point coordinates by inputting them in the inspector. With the hotspot properly configured, we can now run a quick test. Start your game, move the cursor over the window and you should see the name of the hotspot in the action bar ( 24 ). Clicking on the hotspot, the character will move to the point we defined and face the window. Under the hood Remember that we set our character so that its origin is between its feet. When your character moves toward a point, Popochiu will make sure the origin of the character matches the destination point's coordinates. What if the destination coordinates lie outside of the walkable area? In this case, Popochiu will trace the path toward the coordinates but will stop the movement as soon as the character reaches the walkable area's borders. Despite this being a safe scenario, placing a Walk-to point inside the walkable polygon always gives the best results, making the movement predictable. Keep this in mind. Script your first interaction If you ran the game, you may have seen that, while the character moves towards the window, a message is printed on top of the scene: Can't INTERACT with it . That's because we didn't define what should happen when we interact with the window. Remember, in the GUI we selected , clicking on an object will trigger an interaction while right-clicking on an object will trigger an examination. We are now going to script our first interaction, using Godot GDScript language and the very convenient engine API that Popochiu provides to make our life easier. Help! I'm not a developer! \"API\" stands for \"Application Programming Interface\" and in our context, it's the set of objects and functions that makes it very easy to implement all those behaviors common to most adventure games (like making a character talk, or adding an item to the inventory), without knowing the ins and outs of the underlying Godot game engine. In the room tab of the Popochiu dock, locate the \" Open Script \" icon for the Window hotspot ( 25 ): This will open the GDScript connected to this hotspot in the Godot scripting editor ( 26 ): Under the hood Every clickable object that Popochiu creates for you comes with an attached script. Those scripts do nothing by themselves but are based on commented templates that will make it easier to implement the desired behaviors, by editing and filling out some predefined functions. We will now add some interaction to the script. So far it will be simple stuff: we'll make our main character say something meaningful when we examine the window, and - in the absence of other elements in the room - act a bit weird when we try to interact with the window. Locate the _on_click() function in the script. It should read something like this: # When the node is clicked func _on_click() -> void: # Replace the call to E.command_fallback() with your code. E.command_fallback() # For example, you can make the player character walk to this hotspot, gaze at it, and then say # something: # await C.player.walk_to_clicked() # await C.player.face_clicked() # await C.player.say(\"What a nice view\") Popochiu automatically executes this function when you click over the Window hotspot. We just need to put something meaningful into it. Let's try something. Change the function so it looks like this: # When the node is clicked func _on_click() -> void: await C.player.walk_to_clicked() await C.player.face_clicked() await E.wait(0.5) for n in 3: await C.player.face_left() await E.wait(0.3) await C.player.face_right() await E.wait(0.3) await C.player.face_clicked() await C.player.say(\"I wanted to open the window but I can't find the handle\") Save the script ( ctrl/cmd + s ) and run your game. Now when you click the window, the character will walk to it, turn around three times like it is looking around for something, then face the window and say a phrase. Yay! You reached an important milestone! Now your game feels more alive, isn't it? Let's see what happened, breaking the function down to pieces. Ignore for a moment the await keyword. await C.player.walk_to_clicked() await C.player.face_clicked() These two lines use the C Popochiu object. It holds a reference to every character in the game. Our character is called Goddiu , so C.Goddiu allows us to give commands to that character. But since Goddiu is also the character that the player controls, we can use the shortcut C.player . This comes in very handy for those games that have more player-controlled characters, like Maniac Mansion , or Day of the Tentacle . You can change the active character as the game progresses but your scripts will point to the current active character, sparing you the effort to duplicate the code for each and every playable character. await E.wait(0.5) for n in 3: await C.player.face_left() await E.wait(0.3) await C.player.face_right() await E.wait(0.3) Here we are literally waiting for some time to pass. E is the object representing the game engine (Popochiu!) and we are asking it to wait for half a second. After that, we use the `for`` GDScript keyword to repeat the same code three times. Info This is not a feature of Popochiu, it is standard Godot language. All Popochiu objects and functions are standard Godot functions. As Popochiu matures, it will take care of more and more work in a standardized and simplified way. Stuff like translations, dynamic lightning and music, parallax, and more. In the meantime, since its language is standard GDScript, you have all the power of Godot at your fingertips and you can customize your game the way you want. The executed code just flips the character left and right after a small pause, as it is looking around. await C.player.face_clicked() await C.player.say(\"I wanted to open the window but I can't find the handle\") These last two lines make sure the character finally looks towards the window and says its line. Help! I'm not a developer! As the for keyword, await is provided by Godot out of the box. Without going too deep into technical details, what it does is make sure that while the subsequent function is executed, no other things will happen. In our example, if we omitted the await keyword in every line, the character would have started walking to the window, while flipping frantically left and right and talking at the same time (but finishing printing the line in a strange way). There are times you want this to happen, like a character who talks in the background without \"blocking\" the game flow, but omitting await usually leads to strange, unexpected behaviors and should be done only on purpose. Now let's provide an examine interaction. Edit the _on_right_click() function you can find further down the script so it looks like this: # When the node is right clicked func _on_right_click() -> void: await C.player.face_clicked() await C.player.say(\"The weather is so nice today\") await C.player.say(\"I may as well open that window!\") By this time, you should be able to figure out what will happen by yourself. Run the game and see your masterpiece in action. Add a prop We already encountered props, when we added our background to the game's first room. It's now time for a bit more information. Props are arguably the most important elements in a room. Like hotspots, they can be interactive; they have a baseline and a walk-to point ; the shape of the interaction area is represented by a polygon. Unlike hotspots they have their own Sprite2D node and an internal AnimationPlayer . Simply put, props can represent visible (an animated, if necessary) items on the scene. Since they have a baseline, characters can walk behind them, creating a deep, interesting gaming world. But the real boon is that their visibility and \"clickability\" can be turned on and off by code, allowing you to articulate their presence or their function as the game progresses. Enough talk, let's see them in action. Since we already created a \" Background \" for our scene, you should know at this point how to create a new prop. Click on the Create Prop button in the tab room of the Popochiu dock, name it \" ToyCar \" and this time, check out the Will have interaction option ( 27 ). Note If you forget to check this mark, don't worry. You can always make your prop interactive from the inspector. Your new prop will be added to the scene tree as a child of the Props node ( 28 ). You should also notice a squared area in the center of the scene ( 29 ). That's the new prop's interaction polygon, set to the default squared shape. Our prop is very much like a hotspot at the moment, since it has no texture. Let's add one. If you don't have a sprite ready for your prop, you can download this one from the demo game. Save it into your project, in the game/rooms/<your room name>/props/<your prop name>/toy_car.png folder, and rename it as you see fit. Now we can set the Texture property in the prop inspector, by dragging the image from the FileSystem in place ( 30 ). Make sure your prop is selected in the scene tree and drag it somewhere to the left part of the walkable area. Then select the Interaction Polygon button in the toolbar, like you did for the hotspot and change the shape of the polygon so that it matches the one of the sprite. Your scene should look more or less like this: Since the baseline is in the middle of the prop, it is already correctly positioned so the character can walk behind it. You can run the game and test that's the case. Tip This prop is pretty small and it can be difficult to position your character's feet behind it, without triggering the script of the prop itself. One possible trick is to edit the polygon so that it stays out of the way if you click on the prop itself. But there is a simpler and less destructive way to achieve that. Locate the PopochiuClickable section in the prop inspector, and uncheck the Clickable property ( 32 ) for the toy car. This will render the prop non-interactive. The Clickable property can also be set on or off in a script, nice when the nature of the prop depends on your game's status. Remember to turn on this property to follow up with this tutorial! Eventually, we want to enable our main character to pick up the toy car and add it to the inventory. For that though, we need some more elements, so we'll get back to that later. For the moment, we'll just script a simple \"examine\" interaction, but we'll seize the opportunity to learn something new. Click the Open in Script icon that you can find on the prop line in the Popochiu dock to edit the prop script. If you skim through it, you will notice it's very similar to the script for a hotspot. This makes sense since the interaction part is mostly the same. Our GUI dictates that the character examines the surroundings by clicking the right mouse button, so let's make our _on_right_click() function like this: func _on_right_click() -> void: await C.player.face_clicked() await C.player.say(\"Popsy leaves his toys everywhere!\") await C.player.say(\"I have to pay attention or I will step on it.\") At this point, you should be familiar with those instructions. Run the game and see how the main character comments on the mess left by its younger friend. This comment conveys some lore about the game world, telling the player something about Popsy's personality (we added Popsy as a second character earlier), but it's pretty long and we may want to put our accent on the second part: paying attention before stepping over it. This may be a signpost to suggest to the player that it's better to pick the toy car up. To achieve our design goal, we'll add a bit of logic to our interaction, leveraging the power of GDScript. We will create a boolean property for the toy car (boolean means the property can be either true or false , no other values are allowed), and will use it like a switch, to know if we already examined the prop at least one time. This way we'll make the main character say only the second line if the player examines the prop more than once. It takes longer to say it than to do it. First of all, we'll add a property to the prop. Scroll up to the top of the script, and add the highlighted line to create a boolean variable, assigning it the true value. @tool extends PopochiuProp # You can use E.queue([]) to trigger a sequence of events. # Use await E.queue([]) if you want to pause the excecution of # the function until the sequence of events finishes. var first_time_seen := true # <--- add this instruction #region Virtual #################################################################################### The assignment of the true value happens only when the prop is created, as soon as you start the game. Tip You may be asking yourself if the name of the variable has to be exactly that one. That's not the case: this property is completely custom and Popochiu doesn't care about its name, and not even about its value actually, it doesn't even want you to use it. You can name your variables whatever you want, but it's a best practice to have names that reflect their purpose. You don't want to end up with scripts full of a , b , c , x or my_var ... they will be a mess to maintain! Now that we have a way to know if it's the first time we examined the prop, let's change the _on_right_click() like this: # When the node is right clicked func _on_right_click() -> void: await C.player.face_clicked() if first_time_seen: await C.player.say(\"Popsy leaves his toys everywhere!\") first_time_seen = false await C.player.say(\"I have to pay attention or I will step on it.\") You can see we are now testing the value by using an if statement. It almost reads like plain English, right? If it's the first time that we examine the prop, we say the first phrase, then we change the value of the first_time_seen variable . As long as we run the game, the value won't change back so the next time you examine the prop, the if statement is skipped and the execution will jump to the last line. Info If the variable is reset to true every time the game is started, what happens when I restore a saved game? Saving your game is not part of this introductory guide, but don't worry! Popochiu automatically saves the values of all custom properties and restores them for you when you load a saved game. Run the game and test it. Done, we have a prop in the scene! It's now time to learn how to use the character's inventory.","title":"Create the first room"},{"location":"getting-started/creating-a-game-stub/create-the-first-room/#create-the-first-room","text":"Now that we have two characters, it's time to create a location for them to interact with. In Popochiu, game locations are referred to as rooms . More broadly, a room can serve as any game screen, including splash screens, menus, or close-ups. Not all rooms need to feature characters, and the main character may be rendered invisible in specific rooms. To create our first room, just click the Create room button in Popochiu's main dock ( 13 ). A popup will appear, very similar to the one to create a new character. This time, an additional checkbox is available. This allows us to set the newly created room as the main scene of the Godot project. Check it out so we don't have to do it later. This scene will also be the only room in this game stub. Name the new room whatever you want. If you want to follow along, let's name this room \" House \" and make it the main scene. Popochiu will create the new room, open the room scene in the editor, and open the corresponding Room tab in the plugin interface. Much like a character, a room needs a sprite to represent the background of the location. We are going to use this background from the example game. But hey! The room has nothing like a sprite in it! Quite the opposite, the scene tree seems to be pretty empty: Unlike other objects in Popochiu, rooms are containers for other more specialized objects, the most important of which are Props . Props are every visible part of a location, used to make the environment believable. They can go from a small collectable item, all the way to location backgrounds. Under the hood Popochiu makes no distinction based on the prop function in the game, it knows little about that. You add as many as you want into a scene and interact with them via your game script. The only thing the engine knows about props is their visibility and their clickability . By flagging those two properties on or off, you can switch objects in and out of a location, and make them interactive. Armed with this knowledge, it's now clear we must create a prop to hold our background. That's easy. If you followed the steps above, Popochiu dock should be showing the Home room tab. Click the Create prop button and as usual, a new window will pop up: Name the new prop \" Background \" and leave the \"Will have interaction?\" option unchecked. You don't want all of your screen to react to clicks when you move around. Note Moving around the screen doesn't require the background or anything else to be interactive. Popochiu will take care of moving the character for you when you click on a non-interactive area. Go on to learn how to constraint character movement to the right zones. Click OK and your prop will be created. You should see it in the scene tree, under the Props grouping node. The inspector should look something like this: Now you can see the Prop has a Texture parameter. By this time you should be able to figure out what to do. Save the downloaded background sprite in the game/rooms/house/props/background/ folder, then drag it from Godot Editor file manager to the field in the inspector. Your scene should now show the background image. At this point you have a main character and a main scene defined. These are the minimum steps needed to run a Popochiu game. Treat yourself after all this effort, by hitting the Run button at the top right of the editor and seeing your game in action. If you did everything right, you should see your main character standing in the center of the room. Clicking on the screen will flip the character so that it faces the cursor coordinates. Note If you followed this tutorial from the start, when you run the game Popochiu will complain about not found animations. Don't worry about those errors, we didn't include animations to keep this introduction short. Rest assured though that Popochiu has full animation support: it already manages standard animations (for an idle character, for walking and for talking), without having to write any code. A game dev can add a full set of custom animations to play during cutscenes or to support different emotions in dialogues, and so on. For those who work with Aseprite , Popochiu also provides a powerful automated importer that will make creating rooms and characters a breeze and will enable a fast iterative development workflow. Learn more about animations . Learn more about the Aseprite importers","title":"Create the first room"},{"location":"getting-started/creating-a-game-stub/create-the-first-room/#add-a-walkable-area","text":"Our character is standing there in the middle of the room, doing nothing. If we click on the screen we would expect it to walk to the clicked location, but that's not happening. The reason is that we defined no areas in which the character is allowed to move. Popochiu refers to those elements as Walkable Areas . They are objects that can live only inside rooms, and each room can have more than one (see the box below for an explanation). For now, let's create a single walkable area representing the room floor. In the Room tab of Popochiu dock, click the Create walkable area button ( 16 ). In the popup window, just name your new walkable area \" Floor \" (or whatever you find descriptive enough). Click OK and a new element will be added to the scene. Selecting the Perimeter node in the scene tree ( 17 ) to highlight a squared polygon in the center of the scene. Now you have to adjust the vertices of that polygon ( 18 ) to whatever makes sense. Tip To adjust the polygon, just click and drag the vertice handles around. It's quite intuitive, but you can add vertices to the polygon by clicking anywhere along a segment. When you have adjusted your walkable area, it should look something like this: Save the project and run your game. Your character should now be able to move around the room, without leaving the area you defined. Note If you aren't new to Godot, you may think we forgot to mention the Bake NavigationPolygon** button in the toolbar ( 19 ). That's not the case, Popochiu bakes the polygon for you. Tip You usually don't want your walkable area to cover the entire floor that you painted, or your character will be able to stand on the very border of it, too near the wall, creating a terrible effect. Remember that Popochiu will stop the movement as soon as the origin point of your character scene reaches one of the walkable area borders. Additional walkable areas It may not be obvious but you may want (or need) a room to have more than a single walkable area. Here are some example cases: A location with two areas separated by an obstacle (like a chasm), that the character can enter both sides. A location with different levels, the character can climb to or reach depending on the game script or specific conditions. A location with a large prop that can be removed (like a pile of fallen rocks): when the prop is removed a larger walkable area is used in place of the smaller one. Since you can define which walkable area is the active one for the character from your scripts, having multiple walkable areas unlocks a lot of possibilities for complex locations.","title":"Add a Walkable Area"},{"location":"getting-started/creating-a-game-stub/create-the-first-room/#add-a-hotspot","text":"Our character can now move around the room, but there is little it can do. It is time to add some interaction. A hotspot is the most basic form of interaction you can have in a room. It is just an area of the screen, delimited by a polygon drawn at a specific position, that has a name and a script attached to it. It has no sprite of its own, it just sits there on top of other elements, waiting to react to the cursor. By means of its script, it can react to events like mouse clicks. That's exactly what we're going to do. Creating a hotspot is much like creating a walkable area. In the Room tab of Popochiu dock, click the Create hotspot button ( 20 ). In the popup window, just name your new hotspot \" Window \" (or whatever you find descriptive enough). Click OK and a new element will be added to the scene. When you select the new hotspot in the scene tree ( 21 ), a bunch of gizmos are shown in the scene preview. We are going to interactively edit three important properties of the hotspot (the interaction polygon , the baseline and the walk-to point ) by using the dedicated buttons in the toolbar ( 23 ). Info Walk-to point , Baseline and Interaction Polygon properties are all common to clickable objects like Hotspots, Props and Characters. First of all, click the Interaction Polygon button to show the handles of the standard square polygon for the hotspot. This is basically the same as the walkable area polygon but instead of limiting the character movements, this polygon will just react when the cursor hovers it. Let's draw a shape around the window on the wall: No need to be too precise or polished, rough edges won't be perceivable while playing your game. You just need to avoid, if possible, overlapping with other hotspots (see \" Baseline \" below, to understand how polygon overlapping works). Another important property of the hotspot is the \" Walk to point\", which is the coordinates that the character will reach when you click over the hotspot. You can set these coordinates interactively by clicking on the \"_Walk-to point \" button in the toolbar. A squared marker will appear in the center of the screen. You can drag the marker wherever you want in the room. For our example room, we'll set the following coordinates for the Window hotspot: x : -30 y : -10 so that our main character will walk beside the window. The last property that you want to set is the Baseline . The baseline is simply a coordinate on the Y axis, that represents a point in the imaginary space of the room. If the main character walks above the baseline ( above means the character's origin has a Y coordinate that's lower than the baseline value), it is considered behind the object (in this case the hotspot). If the character origin is below the baseline, it is considered in front of the object. Warning This becomes evident when you have a prop or a character in a room, and you want your main character to walk behind them when its feet are \"farther away\" from the camera, but a hotspot has no sprite to walk behind, so you may think setting the baseline is useless. That's not the case at all. If you don't set your baseline the right way, the polygon-delimited area of the hotspot may remain clickable even when the character is in front of it; or the other way around, a hotspot that should always be in front of the scene, may be covered by your character, making it unreachable. So, always set your baseline. Our window is in the back of the room and the main character has no way to be placed behind it, so we'll set the hotspot baseline to 0 (zero). This means that the baseline is \"as high as the scene\". The character has no way to walk so high. Info Note that you can set the baseline even to negative values. This is what Popochiu automatically does when you name your prop Background or bg , to make sure your background is always at the very back of the scene. Keep this in mind too, if you change the baseline of other elements programmatically (via a script). Tip If you need pixel-perfect precision, you can set the baseline and the hotspot's Walk to point coordinates by inputting them in the inspector. With the hotspot properly configured, we can now run a quick test. Start your game, move the cursor over the window and you should see the name of the hotspot in the action bar ( 24 ). Clicking on the hotspot, the character will move to the point we defined and face the window. Under the hood Remember that we set our character so that its origin is between its feet. When your character moves toward a point, Popochiu will make sure the origin of the character matches the destination point's coordinates. What if the destination coordinates lie outside of the walkable area? In this case, Popochiu will trace the path toward the coordinates but will stop the movement as soon as the character reaches the walkable area's borders. Despite this being a safe scenario, placing a Walk-to point inside the walkable polygon always gives the best results, making the movement predictable. Keep this in mind.","title":"Add a hotspot"},{"location":"getting-started/creating-a-game-stub/create-the-first-room/#script-your-first-interaction","text":"If you ran the game, you may have seen that, while the character moves towards the window, a message is printed on top of the scene: Can't INTERACT with it . That's because we didn't define what should happen when we interact with the window. Remember, in the GUI we selected , clicking on an object will trigger an interaction while right-clicking on an object will trigger an examination. We are now going to script our first interaction, using Godot GDScript language and the very convenient engine API that Popochiu provides to make our life easier. Help! I'm not a developer! \"API\" stands for \"Application Programming Interface\" and in our context, it's the set of objects and functions that makes it very easy to implement all those behaviors common to most adventure games (like making a character talk, or adding an item to the inventory), without knowing the ins and outs of the underlying Godot game engine. In the room tab of the Popochiu dock, locate the \" Open Script \" icon for the Window hotspot ( 25 ): This will open the GDScript connected to this hotspot in the Godot scripting editor ( 26 ): Under the hood Every clickable object that Popochiu creates for you comes with an attached script. Those scripts do nothing by themselves but are based on commented templates that will make it easier to implement the desired behaviors, by editing and filling out some predefined functions. We will now add some interaction to the script. So far it will be simple stuff: we'll make our main character say something meaningful when we examine the window, and - in the absence of other elements in the room - act a bit weird when we try to interact with the window. Locate the _on_click() function in the script. It should read something like this: # When the node is clicked func _on_click() -> void: # Replace the call to E.command_fallback() with your code. E.command_fallback() # For example, you can make the player character walk to this hotspot, gaze at it, and then say # something: # await C.player.walk_to_clicked() # await C.player.face_clicked() # await C.player.say(\"What a nice view\") Popochiu automatically executes this function when you click over the Window hotspot. We just need to put something meaningful into it. Let's try something. Change the function so it looks like this: # When the node is clicked func _on_click() -> void: await C.player.walk_to_clicked() await C.player.face_clicked() await E.wait(0.5) for n in 3: await C.player.face_left() await E.wait(0.3) await C.player.face_right() await E.wait(0.3) await C.player.face_clicked() await C.player.say(\"I wanted to open the window but I can't find the handle\") Save the script ( ctrl/cmd + s ) and run your game. Now when you click the window, the character will walk to it, turn around three times like it is looking around for something, then face the window and say a phrase. Yay! You reached an important milestone! Now your game feels more alive, isn't it? Let's see what happened, breaking the function down to pieces. Ignore for a moment the await keyword. await C.player.walk_to_clicked() await C.player.face_clicked() These two lines use the C Popochiu object. It holds a reference to every character in the game. Our character is called Goddiu , so C.Goddiu allows us to give commands to that character. But since Goddiu is also the character that the player controls, we can use the shortcut C.player . This comes in very handy for those games that have more player-controlled characters, like Maniac Mansion , or Day of the Tentacle . You can change the active character as the game progresses but your scripts will point to the current active character, sparing you the effort to duplicate the code for each and every playable character. await E.wait(0.5) for n in 3: await C.player.face_left() await E.wait(0.3) await C.player.face_right() await E.wait(0.3) Here we are literally waiting for some time to pass. E is the object representing the game engine (Popochiu!) and we are asking it to wait for half a second. After that, we use the `for`` GDScript keyword to repeat the same code three times. Info This is not a feature of Popochiu, it is standard Godot language. All Popochiu objects and functions are standard Godot functions. As Popochiu matures, it will take care of more and more work in a standardized and simplified way. Stuff like translations, dynamic lightning and music, parallax, and more. In the meantime, since its language is standard GDScript, you have all the power of Godot at your fingertips and you can customize your game the way you want. The executed code just flips the character left and right after a small pause, as it is looking around. await C.player.face_clicked() await C.player.say(\"I wanted to open the window but I can't find the handle\") These last two lines make sure the character finally looks towards the window and says its line. Help! I'm not a developer! As the for keyword, await is provided by Godot out of the box. Without going too deep into technical details, what it does is make sure that while the subsequent function is executed, no other things will happen. In our example, if we omitted the await keyword in every line, the character would have started walking to the window, while flipping frantically left and right and talking at the same time (but finishing printing the line in a strange way). There are times you want this to happen, like a character who talks in the background without \"blocking\" the game flow, but omitting await usually leads to strange, unexpected behaviors and should be done only on purpose. Now let's provide an examine interaction. Edit the _on_right_click() function you can find further down the script so it looks like this: # When the node is right clicked func _on_right_click() -> void: await C.player.face_clicked() await C.player.say(\"The weather is so nice today\") await C.player.say(\"I may as well open that window!\") By this time, you should be able to figure out what will happen by yourself. Run the game and see your masterpiece in action.","title":"Script your first interaction"},{"location":"getting-started/creating-a-game-stub/create-the-first-room/#add-a-prop","text":"We already encountered props, when we added our background to the game's first room. It's now time for a bit more information. Props are arguably the most important elements in a room. Like hotspots, they can be interactive; they have a baseline and a walk-to point ; the shape of the interaction area is represented by a polygon. Unlike hotspots they have their own Sprite2D node and an internal AnimationPlayer . Simply put, props can represent visible (an animated, if necessary) items on the scene. Since they have a baseline, characters can walk behind them, creating a deep, interesting gaming world. But the real boon is that their visibility and \"clickability\" can be turned on and off by code, allowing you to articulate their presence or their function as the game progresses. Enough talk, let's see them in action. Since we already created a \" Background \" for our scene, you should know at this point how to create a new prop. Click on the Create Prop button in the tab room of the Popochiu dock, name it \" ToyCar \" and this time, check out the Will have interaction option ( 27 ). Note If you forget to check this mark, don't worry. You can always make your prop interactive from the inspector. Your new prop will be added to the scene tree as a child of the Props node ( 28 ). You should also notice a squared area in the center of the scene ( 29 ). That's the new prop's interaction polygon, set to the default squared shape. Our prop is very much like a hotspot at the moment, since it has no texture. Let's add one. If you don't have a sprite ready for your prop, you can download this one from the demo game. Save it into your project, in the game/rooms/<your room name>/props/<your prop name>/toy_car.png folder, and rename it as you see fit. Now we can set the Texture property in the prop inspector, by dragging the image from the FileSystem in place ( 30 ). Make sure your prop is selected in the scene tree and drag it somewhere to the left part of the walkable area. Then select the Interaction Polygon button in the toolbar, like you did for the hotspot and change the shape of the polygon so that it matches the one of the sprite. Your scene should look more or less like this: Since the baseline is in the middle of the prop, it is already correctly positioned so the character can walk behind it. You can run the game and test that's the case. Tip This prop is pretty small and it can be difficult to position your character's feet behind it, without triggering the script of the prop itself. One possible trick is to edit the polygon so that it stays out of the way if you click on the prop itself. But there is a simpler and less destructive way to achieve that. Locate the PopochiuClickable section in the prop inspector, and uncheck the Clickable property ( 32 ) for the toy car. This will render the prop non-interactive. The Clickable property can also be set on or off in a script, nice when the nature of the prop depends on your game's status. Remember to turn on this property to follow up with this tutorial! Eventually, we want to enable our main character to pick up the toy car and add it to the inventory. For that though, we need some more elements, so we'll get back to that later. For the moment, we'll just script a simple \"examine\" interaction, but we'll seize the opportunity to learn something new. Click the Open in Script icon that you can find on the prop line in the Popochiu dock to edit the prop script. If you skim through it, you will notice it's very similar to the script for a hotspot. This makes sense since the interaction part is mostly the same. Our GUI dictates that the character examines the surroundings by clicking the right mouse button, so let's make our _on_right_click() function like this: func _on_right_click() -> void: await C.player.face_clicked() await C.player.say(\"Popsy leaves his toys everywhere!\") await C.player.say(\"I have to pay attention or I will step on it.\") At this point, you should be familiar with those instructions. Run the game and see how the main character comments on the mess left by its younger friend. This comment conveys some lore about the game world, telling the player something about Popsy's personality (we added Popsy as a second character earlier), but it's pretty long and we may want to put our accent on the second part: paying attention before stepping over it. This may be a signpost to suggest to the player that it's better to pick the toy car up. To achieve our design goal, we'll add a bit of logic to our interaction, leveraging the power of GDScript. We will create a boolean property for the toy car (boolean means the property can be either true or false , no other values are allowed), and will use it like a switch, to know if we already examined the prop at least one time. This way we'll make the main character say only the second line if the player examines the prop more than once. It takes longer to say it than to do it. First of all, we'll add a property to the prop. Scroll up to the top of the script, and add the highlighted line to create a boolean variable, assigning it the true value. @tool extends PopochiuProp # You can use E.queue([]) to trigger a sequence of events. # Use await E.queue([]) if you want to pause the excecution of # the function until the sequence of events finishes. var first_time_seen := true # <--- add this instruction #region Virtual #################################################################################### The assignment of the true value happens only when the prop is created, as soon as you start the game. Tip You may be asking yourself if the name of the variable has to be exactly that one. That's not the case: this property is completely custom and Popochiu doesn't care about its name, and not even about its value actually, it doesn't even want you to use it. You can name your variables whatever you want, but it's a best practice to have names that reflect their purpose. You don't want to end up with scripts full of a , b , c , x or my_var ... they will be a mess to maintain! Now that we have a way to know if it's the first time we examined the prop, let's change the _on_right_click() like this: # When the node is right clicked func _on_right_click() -> void: await C.player.face_clicked() if first_time_seen: await C.player.say(\"Popsy leaves his toys everywhere!\") first_time_seen = false await C.player.say(\"I have to pay attention or I will step on it.\") You can see we are now testing the value by using an if statement. It almost reads like plain English, right? If it's the first time that we examine the prop, we say the first phrase, then we change the value of the first_time_seen variable . As long as we run the game, the value won't change back so the next time you examine the prop, the if statement is skipped and the execution will jump to the last line. Info If the variable is reset to true every time the game is started, what happens when I restore a saved game? Saving your game is not part of this introductory guide, but don't worry! Popochiu automatically saves the values of all custom properties and restores them for you when you load a saved game. Run the game and test it. Done, we have a prop in the scene! It's now time to learn how to use the character's inventory.","title":"Add a prop"},{"location":"getting-started/creating-a-game-stub/game-setup/","text":"Game setup When you first start your project, you are greeted with the Setup popup, where you can define the base parameters of your game. Using this window will take care of configuring Godot project with a coherent preset of parameters so that your game looks good in all situations. Also, it will preconfigure the Game User Interface (GUI) of your choice, so that you don't have to. Set game resolution The Native game resolution ( 1 ) is the actual resolution of your assets (i.e. background). This resolution will be scaled up or down to match the actual display resolution (see below). Usually, you want to set this to the size of a full-game background that fills the entire \"screen\". For example, if you plan to create a retro-vibes pixel-art adventure game like the early ones by Sierra or LucasArts, you may want to keep this resolution down to 320x200 , which was the native resolution of VGA displays back then. If you want to create a high-res game like the modern Deponia series, with beautifully painted art, you may want to bring this up to 1920x1080 , which is a modern Full-HD display resolution. Tip If you plan to develop a pixel-art game for widescreen displays, these are common resolutions that can work on a modern PC: 320x180 : vertically very small, good to emulate pioneering 80s games like Sierra's King's Quest or similar. 356x200 : more vertical space, this is a \"widescreen\" version of the 320x200 that games like The Secret of Monkey Island or King's Quest V had on an IBM PC or Amiga, back then. 384x216 : there were no games back then featuring this resolution, but it can be used if you want to have a bit more vertical space for higher sprites or to accommodate a bulky interface like the 9-verbs one, without ruining the retro-vibe . Some prefer not to play adventure games in full-screen so, once you've set the native resolution for your game, you may use the Playing window resolution ( 2 ) values to set the size your game will have when played in windowed mode. For low-res games, you want to provide a larger window than the native resolution, or on most modern displays, it will be very tiny. Note The provided default is a good fit for most Full-HD displays, and the player will be able to resize the window anyway. Probably it's worth adjusting the window size only if you know your game will be played in specific contexts. Finally, the Game type ( 3 ) select box will set a bunch of project settings that are better kept coherent, from sprite importing to scaling algorithms, etc. The options are: Custom : This does nothing, leaving all the settings to the developer. 2D : Choose this for high-res games, that may benefit from anti-aliasing when scaled up or down. Pixel : Choose this for low-res and pixel-art games, so that your graphics remain crisp when scaled up or down. Under the hood For the more technical readers, what the Game type options do is preconfigure the Stretch mode to canvas_item and Stretch aspect to keep for you. The Pixel mode also sets textures using the Nearest filter, so that no anti-alias or blurring happens when the game is scaled. Note Nowadays there are so many different display aspect ratios, that making assumptions about how your game will be played is futile. Nonetheless, the vast majority of devices out there (mobile or PCs) have displays close enough to 16:9 that you will probably end up keeping this ratio into consideration. That's the reason why Popochiu default values are set to 320x180 : it is an old-style resolution, with the aspect ratio of a modern display. Select game GUI Since version 2.0, Popochiu comes with a preset of different GUI templates, and a set of features to create your own custom one. GUI templates will contain everything you need, from assets to logic, to mimic one of the most common game interfaces of the Adventure genre. In the GUI Template ( 4 ) section of the Setup popup, you can click on a GUI icon to select which template to apply: Custom : select this if you want to create your GUI. That's the \"No template, please\" option. 9 Verbs : inspired by the original SCUMM interface, first seen in Monkey Island 2: LeChuck's Revenge . Sierra : inspired by the early 90s SCI interface, common to King's Quest and Space Quest games in the early 90s. 2-Click Context-sensitive : the most basic interface for an Adventure Game, common to many modern titles like Deponia - left-click to walk and interact, right-click to examine. Warning You can change your mind and apply a different template later during the development of your game, but mind that doing this will replace your GUI (and all the custom logic or graphics) with a new template. Also, keep in mind that some GUIs will take up space on the screen (like the 9 Verbs one), and this will impact your backgrounds. Note You can go back and review your game setup choices at any moment, by clicking the \"Setup\" button at the bottom of the Popochiu Main Dock .","title":"Game setup"},{"location":"getting-started/creating-a-game-stub/game-setup/#game-setup","text":"When you first start your project, you are greeted with the Setup popup, where you can define the base parameters of your game. Using this window will take care of configuring Godot project with a coherent preset of parameters so that your game looks good in all situations. Also, it will preconfigure the Game User Interface (GUI) of your choice, so that you don't have to.","title":"Game setup"},{"location":"getting-started/creating-a-game-stub/game-setup/#set-game-resolution","text":"The Native game resolution ( 1 ) is the actual resolution of your assets (i.e. background). This resolution will be scaled up or down to match the actual display resolution (see below). Usually, you want to set this to the size of a full-game background that fills the entire \"screen\". For example, if you plan to create a retro-vibes pixel-art adventure game like the early ones by Sierra or LucasArts, you may want to keep this resolution down to 320x200 , which was the native resolution of VGA displays back then. If you want to create a high-res game like the modern Deponia series, with beautifully painted art, you may want to bring this up to 1920x1080 , which is a modern Full-HD display resolution. Tip If you plan to develop a pixel-art game for widescreen displays, these are common resolutions that can work on a modern PC: 320x180 : vertically very small, good to emulate pioneering 80s games like Sierra's King's Quest or similar. 356x200 : more vertical space, this is a \"widescreen\" version of the 320x200 that games like The Secret of Monkey Island or King's Quest V had on an IBM PC or Amiga, back then. 384x216 : there were no games back then featuring this resolution, but it can be used if you want to have a bit more vertical space for higher sprites or to accommodate a bulky interface like the 9-verbs one, without ruining the retro-vibe . Some prefer not to play adventure games in full-screen so, once you've set the native resolution for your game, you may use the Playing window resolution ( 2 ) values to set the size your game will have when played in windowed mode. For low-res games, you want to provide a larger window than the native resolution, or on most modern displays, it will be very tiny. Note The provided default is a good fit for most Full-HD displays, and the player will be able to resize the window anyway. Probably it's worth adjusting the window size only if you know your game will be played in specific contexts. Finally, the Game type ( 3 ) select box will set a bunch of project settings that are better kept coherent, from sprite importing to scaling algorithms, etc. The options are: Custom : This does nothing, leaving all the settings to the developer. 2D : Choose this for high-res games, that may benefit from anti-aliasing when scaled up or down. Pixel : Choose this for low-res and pixel-art games, so that your graphics remain crisp when scaled up or down. Under the hood For the more technical readers, what the Game type options do is preconfigure the Stretch mode to canvas_item and Stretch aspect to keep for you. The Pixel mode also sets textures using the Nearest filter, so that no anti-alias or blurring happens when the game is scaled. Note Nowadays there are so many different display aspect ratios, that making assumptions about how your game will be played is futile. Nonetheless, the vast majority of devices out there (mobile or PCs) have displays close enough to 16:9 that you will probably end up keeping this ratio into consideration. That's the reason why Popochiu default values are set to 320x180 : it is an old-style resolution, with the aspect ratio of a modern display.","title":"Set game resolution"},{"location":"getting-started/creating-a-game-stub/game-setup/#select-game-gui","text":"Since version 2.0, Popochiu comes with a preset of different GUI templates, and a set of features to create your own custom one. GUI templates will contain everything you need, from assets to logic, to mimic one of the most common game interfaces of the Adventure genre. In the GUI Template ( 4 ) section of the Setup popup, you can click on a GUI icon to select which template to apply: Custom : select this if you want to create your GUI. That's the \"No template, please\" option. 9 Verbs : inspired by the original SCUMM interface, first seen in Monkey Island 2: LeChuck's Revenge . Sierra : inspired by the early 90s SCI interface, common to King's Quest and Space Quest games in the early 90s. 2-Click Context-sensitive : the most basic interface for an Adventure Game, common to many modern titles like Deponia - left-click to walk and interact, right-click to examine. Warning You can change your mind and apply a different template later during the development of your game, but mind that doing this will replace your GUI (and all the custom logic or graphics) with a new template. Also, keep in mind that some GUIs will take up space on the screen (like the 9 Verbs one), and this will impact your backgrounds. Note You can go back and review your game setup choices at any moment, by clicking the \"Setup\" button at the bottom of the Popochiu Main Dock .","title":"Select game GUI"},{"location":"getting-started/creating-a-game-stub/introduction/","text":"Introduction This section will guide you through the process of creating a very small stub for a game. You will set up a quick game with a single location, a couple of interacting characters and items, plus dialogs and inventory. You can use the resulting stub to experiment and tinker as you read the documentation. If you are already familiar with Popochiu and have already created your project, you can jump to the Tutorials section to learn more about more advanced features. Info If you are moving your first steps in Adventure Games development, or just evaluating if Popochiu is for you, you may want to download the [Example Game Assets Pack , which contains all the assets used in this tutorial. If you just want to tinker with Popochiu or experiment on a throw-away project, you can just clone the Example Game , that's already complete and ready to run. Table of contents Warning To follow this introductory guide you must have already created a new Godot project and installed Popochiu . To create our game stub we will: Game setup Set game resolution Select game GUI Create characters Add another character Select the main character Create the first room Add a Walkable Area Add a hotspot Script your first interaction Add a prop Add an inventory item Script your first dialogue Script a dialog Use inventory items Conclusions Homeworks Add a prop and an inventory item Prevent losing the key Solve a problem with the implemented dialog What's next There is more to Popochiu, but this will showcase the fundamental building blocks of how the engine works. Let's start!","title":"Introduction"},{"location":"getting-started/creating-a-game-stub/introduction/#introduction","text":"This section will guide you through the process of creating a very small stub for a game. You will set up a quick game with a single location, a couple of interacting characters and items, plus dialogs and inventory. You can use the resulting stub to experiment and tinker as you read the documentation. If you are already familiar with Popochiu and have already created your project, you can jump to the Tutorials section to learn more about more advanced features. Info If you are moving your first steps in Adventure Games development, or just evaluating if Popochiu is for you, you may want to download the [Example Game Assets Pack , which contains all the assets used in this tutorial. If you just want to tinker with Popochiu or experiment on a throw-away project, you can just clone the Example Game , that's already complete and ready to run.","title":"Introduction"},{"location":"getting-started/creating-a-game-stub/introduction/#table-of-contents","text":"Warning To follow this introductory guide you must have already created a new Godot project and installed Popochiu . To create our game stub we will: Game setup Set game resolution Select game GUI Create characters Add another character Select the main character Create the first room Add a Walkable Area Add a hotspot Script your first interaction Add a prop Add an inventory item Script your first dialogue Script a dialog Use inventory items Conclusions Homeworks Add a prop and an inventory item Prevent losing the key Solve a problem with the implemented dialog What's next There is more to Popochiu, but this will showcase the fundamental building blocks of how the engine works. Let's start!","title":"Table of contents"},{"location":"getting-started/creating-a-game-stub/script-your-first-dialogue/","text":"Script your first dialogue The last very common case we want to cover with this introductory guide is the interaction with another character. If you followed this tutorial from the start, you should have created two characters . Popochiu adds our main character to the room for us when the game starts, so we don't need to do it manually. On the other hand, as we are the directors of our own game, it leaves us to place non-player characters where they belong. We will then add Popsy (or whatever you named your secondary character) to our sole room, and script some interactions. To add the character to the room, click on the Add character to room button in the tab room of the Popochiu dock ( 34 ), then select Popsy from the dropdown list. The character will be added in the center of the scene. Move it somewhere to the right, so the scene looks like this: Now that we have a character to talk to, let's create our first dialog. Dialogs in Popochiu are managed by Dialog trees , global objects like characters, rooms and inventory items. Each dialog tree is a catalog of lines that will be shown by the dialog GUI when that specific dialog tree is started. When the user selects one of the lines, a script is triggered. Simple and effective. Info Lines in a specific dialog tree can be turned on and off, and you can start a different dialog tree from scripts, so you can branch out of a dialog into another one, and back to writing simple wiring code. To create a new dialog tree, click on the Create dialog tree button in the main tab of the Popochiu dock ( 36 ), and name the new dialog in the popup window that appears. We'll name our new dialog tree \" PopsyHouseChat \". Tip Keep your dialog tree names clear and meaningful. Medium to large games, with several characters that may appear in different locations, or in different moments along the story, will soon become a mess if every dialog is named like PirateDlg , Dialog1 , FirstTalkTentacle or similar. You may want to find a pattern that makes it easier to remember what's the dialog content, participants and place, like CharacterPlaceTopic or whatever makes sense to you. This will also make the list easier to navigate and will help with autocomplete in scripts. Now that we have a dialog tree, we want to add options for the player to choose from. To edit the \" PopsyHouseChat \" dialog tree, click the Open in Editor icon (locate the dialog tree in the main tab list and find the icon on the entry row). Under the hood While most of the Popochiu objects we have encountered so far are Godot Scenes , dialog trees are Godot Resources . Scenes are edited in the \"scene preview\" area, in the center of the editor. Resources are edited in the inspector, so when you click the Open in Editor icon for a dialog tree, nothing will happen in the center. Head to the inspector panel and you will see something like this: To add a dialog option, click the Options property ( 37 ), then the Add Element button that appears. An option named \" Opt1 \" is added to the list ( 38 ) (you can see the Size of the Options property is now 1 ). Click on the Opt1 field to open the drop-down and you should see something like this: Every dialog option in a tree has many different properties ( 39 ): ID is a unique handler that will make it easier to manipulate that option from your scripts. Text is the text that is shown in the GUI when the dialog is started, and the user is asked to select the options. Icon is useful if you want to use an image-based interface for your dialogs instead of a text-based one (an example of this can be found in LucasArts classic Sam & Max Hit the Road ) Visible is a flag by which you can turn specific options on and off, for example, if you consider a topic explored and no more useful in the context of the game. Disabled means this option is \"consumed\". It is made invisible and can't be made visible anymore. Options flagged as Always on can't be disabled. This is useful if you have some bulk logic to disable more options in a dialog tree, and don't want to cherry-pick the important ones in your script. This is also useful to avoid soft-lock situations due to a mistake in a script (it may happen, most of all if you work in a team). Let's create a first line of dialog about the toy car that Popsy left on the floor. Populate \" Opt1 \" as follows: ID : MessyRoom Text : Popsy, I told you to put your toys away when you're done! Leave the rest untouched. Create other two options by clicking the \"Add Element\" button ( 40 ) and populate them like this: Second option ID : AskBored Text : Are you bored? Visible : Off (uncheck it) Third option ID : Bye Text : Bye, Popsy! This will do for now. Hit ctrl/cmd-s to save your project and the dialog tree resource. Tip It may be useless to say at this point, but keep your options IDs meaningful and \"talking\" (no pun intended). Find your own conventions, but remember you will have to navigate your dialogs in scripts by these identifiers, so choose names that are love letters to your future self. To see our dialog in action, we need to start it somehow. In the context of our game, we'll simply start the dialog when we click on our companion character in the room. Locate the secondary character in Popochiu main dock, and open its script by clicking on the Open in Script icon. Find the _on_click() function and edit it like this: # When the node is clicked func _on_click() -> void: await C.player.face_clicked() D.PopsyHouseChat.start() Run the game and click on the secondary character. Your dialog should start and you should see the first and last options only: Script a dialog We have a dialog in place, but so far, no matter which option we choose, the dialog ends abruptly. This is because the script template works like this. We are going to change the script to implement some meaningful dialog. Go back to Popochiu main dock and open the script by clicking on the Open in Script icon on the dialog tree row ( 41 ). The dialog script contains a small number of functions. The one we are going to change is _option_selected() . As the name implies, it is invoked by the engine when the user selects an option. The engine will pass the selected option as the argument of the function, so we can inspect it and decide what to do. Let's change the function like this: func _option_selected(opt: PopochiuDialogOption) -> void: # Use match to check which option was selected and excecute something for # each one match opt.id: \"MessyRoom\": await D.say_selected() await C.Popsy.say(\"Errr... sorry, I forgot to tidy up!\") await C.player.say(\"OK, but it's better not to leave toy cars around.\") await C.player.say(\"Someone can step over them and fall.\") await C.Popsy.say(\"Can you help me tidy up?\") await E.wait(1.0) await C.player.say(\"You little lazy rascal!\") turn_off_options([\"MessyRoom\"]) turn_on_options([\"AskBored\"]) \"AskBored\": await D.say_selected() await C.Popsy.say(\"Yes! I want my toy car!\") \"Bye\": await D.say_selected() stop() _: # By default close the dialog. Options won't show after calling # stop() stop() _show_options() In this function, we are using the match construct of the GDScript language to do something different for each option of our dialogue. We are going to match against the dialog option ID (we told you that would have come in handy). For each one, we execute a script that in this case works as a short cutscene. Warning Please note that the turn_off_options() function takes an array as a parameter. In the example code, we are always passing a one-element array to it. Don't be tricked into feeding it a string. When the dialog starts, we only have one option (plus the exit line to stop the dialog). This first option starts an exchange that goes for some lines. At the end of the exchange, that option is turned off, and another one is turned on, with a signpost to a possible goal for the player (find the toy car for Popsy). The scope of this small game is too narrow for this to make sense, but that's an example of how dialogs can be shaped to follow the story flow. Help! I'm not a developer! The match keyword is a GDScript powerful tool when you have a single variable that can assume a large number of known values. Basically, you ask the language to inspect the variable and only execute the lines of code that are in the block that is nested inside a specified value. Since we are matching against the option ID, and we populated the option IDs as strings, we expect that variable to have one of the values we choose at design time. The _ value at the end is a fallback one. If none of the above matches, this block of code is executed. It's smart to always leave a fallback here, that calls the stop() function because if someone adds an option and forgets to code a block for it, the game won't block. Tip This function can grow very long in the case of articulated dialogs. The best option is to create private functions in the dialog tree script to isolate particularly long branches. Of course, don't forget to await for them when you write your call! The savvy reader may have understood at this point, how powerful this dialog system is. Since you execute a full script when the user selects an option, the sky is the limit here. You may play animations, populate the inventory, change the game state in different locations, trigger cutscenes (flashbacks?), switch the player character, or do something really strange like saving the game during a dialog (hardly seen in point-and-click games, but why not?). Other engines describe dialogs as declarative, nested lists of lines that the characters can say. Popochiu takes a more dev-oriented road and leaves the developer in total control. We're almost done. Since Popsy wants its toy car, let's make it happy!","title":"Script your first dialogue"},{"location":"getting-started/creating-a-game-stub/script-your-first-dialogue/#script-your-first-dialogue","text":"The last very common case we want to cover with this introductory guide is the interaction with another character. If you followed this tutorial from the start, you should have created two characters . Popochiu adds our main character to the room for us when the game starts, so we don't need to do it manually. On the other hand, as we are the directors of our own game, it leaves us to place non-player characters where they belong. We will then add Popsy (or whatever you named your secondary character) to our sole room, and script some interactions. To add the character to the room, click on the Add character to room button in the tab room of the Popochiu dock ( 34 ), then select Popsy from the dropdown list. The character will be added in the center of the scene. Move it somewhere to the right, so the scene looks like this: Now that we have a character to talk to, let's create our first dialog. Dialogs in Popochiu are managed by Dialog trees , global objects like characters, rooms and inventory items. Each dialog tree is a catalog of lines that will be shown by the dialog GUI when that specific dialog tree is started. When the user selects one of the lines, a script is triggered. Simple and effective. Info Lines in a specific dialog tree can be turned on and off, and you can start a different dialog tree from scripts, so you can branch out of a dialog into another one, and back to writing simple wiring code. To create a new dialog tree, click on the Create dialog tree button in the main tab of the Popochiu dock ( 36 ), and name the new dialog in the popup window that appears. We'll name our new dialog tree \" PopsyHouseChat \". Tip Keep your dialog tree names clear and meaningful. Medium to large games, with several characters that may appear in different locations, or in different moments along the story, will soon become a mess if every dialog is named like PirateDlg , Dialog1 , FirstTalkTentacle or similar. You may want to find a pattern that makes it easier to remember what's the dialog content, participants and place, like CharacterPlaceTopic or whatever makes sense to you. This will also make the list easier to navigate and will help with autocomplete in scripts. Now that we have a dialog tree, we want to add options for the player to choose from. To edit the \" PopsyHouseChat \" dialog tree, click the Open in Editor icon (locate the dialog tree in the main tab list and find the icon on the entry row). Under the hood While most of the Popochiu objects we have encountered so far are Godot Scenes , dialog trees are Godot Resources . Scenes are edited in the \"scene preview\" area, in the center of the editor. Resources are edited in the inspector, so when you click the Open in Editor icon for a dialog tree, nothing will happen in the center. Head to the inspector panel and you will see something like this: To add a dialog option, click the Options property ( 37 ), then the Add Element button that appears. An option named \" Opt1 \" is added to the list ( 38 ) (you can see the Size of the Options property is now 1 ). Click on the Opt1 field to open the drop-down and you should see something like this: Every dialog option in a tree has many different properties ( 39 ): ID is a unique handler that will make it easier to manipulate that option from your scripts. Text is the text that is shown in the GUI when the dialog is started, and the user is asked to select the options. Icon is useful if you want to use an image-based interface for your dialogs instead of a text-based one (an example of this can be found in LucasArts classic Sam & Max Hit the Road ) Visible is a flag by which you can turn specific options on and off, for example, if you consider a topic explored and no more useful in the context of the game. Disabled means this option is \"consumed\". It is made invisible and can't be made visible anymore. Options flagged as Always on can't be disabled. This is useful if you have some bulk logic to disable more options in a dialog tree, and don't want to cherry-pick the important ones in your script. This is also useful to avoid soft-lock situations due to a mistake in a script (it may happen, most of all if you work in a team). Let's create a first line of dialog about the toy car that Popsy left on the floor. Populate \" Opt1 \" as follows: ID : MessyRoom Text : Popsy, I told you to put your toys away when you're done! Leave the rest untouched. Create other two options by clicking the \"Add Element\" button ( 40 ) and populate them like this: Second option ID : AskBored Text : Are you bored? Visible : Off (uncheck it) Third option ID : Bye Text : Bye, Popsy! This will do for now. Hit ctrl/cmd-s to save your project and the dialog tree resource. Tip It may be useless to say at this point, but keep your options IDs meaningful and \"talking\" (no pun intended). Find your own conventions, but remember you will have to navigate your dialogs in scripts by these identifiers, so choose names that are love letters to your future self. To see our dialog in action, we need to start it somehow. In the context of our game, we'll simply start the dialog when we click on our companion character in the room. Locate the secondary character in Popochiu main dock, and open its script by clicking on the Open in Script icon. Find the _on_click() function and edit it like this: # When the node is clicked func _on_click() -> void: await C.player.face_clicked() D.PopsyHouseChat.start() Run the game and click on the secondary character. Your dialog should start and you should see the first and last options only:","title":"Script your first dialogue"},{"location":"getting-started/creating-a-game-stub/script-your-first-dialogue/#script-a-dialog","text":"We have a dialog in place, but so far, no matter which option we choose, the dialog ends abruptly. This is because the script template works like this. We are going to change the script to implement some meaningful dialog. Go back to Popochiu main dock and open the script by clicking on the Open in Script icon on the dialog tree row ( 41 ). The dialog script contains a small number of functions. The one we are going to change is _option_selected() . As the name implies, it is invoked by the engine when the user selects an option. The engine will pass the selected option as the argument of the function, so we can inspect it and decide what to do. Let's change the function like this: func _option_selected(opt: PopochiuDialogOption) -> void: # Use match to check which option was selected and excecute something for # each one match opt.id: \"MessyRoom\": await D.say_selected() await C.Popsy.say(\"Errr... sorry, I forgot to tidy up!\") await C.player.say(\"OK, but it's better not to leave toy cars around.\") await C.player.say(\"Someone can step over them and fall.\") await C.Popsy.say(\"Can you help me tidy up?\") await E.wait(1.0) await C.player.say(\"You little lazy rascal!\") turn_off_options([\"MessyRoom\"]) turn_on_options([\"AskBored\"]) \"AskBored\": await D.say_selected() await C.Popsy.say(\"Yes! I want my toy car!\") \"Bye\": await D.say_selected() stop() _: # By default close the dialog. Options won't show after calling # stop() stop() _show_options() In this function, we are using the match construct of the GDScript language to do something different for each option of our dialogue. We are going to match against the dialog option ID (we told you that would have come in handy). For each one, we execute a script that in this case works as a short cutscene. Warning Please note that the turn_off_options() function takes an array as a parameter. In the example code, we are always passing a one-element array to it. Don't be tricked into feeding it a string. When the dialog starts, we only have one option (plus the exit line to stop the dialog). This first option starts an exchange that goes for some lines. At the end of the exchange, that option is turned off, and another one is turned on, with a signpost to a possible goal for the player (find the toy car for Popsy). The scope of this small game is too narrow for this to make sense, but that's an example of how dialogs can be shaped to follow the story flow. Help! I'm not a developer! The match keyword is a GDScript powerful tool when you have a single variable that can assume a large number of known values. Basically, you ask the language to inspect the variable and only execute the lines of code that are in the block that is nested inside a specified value. Since we are matching against the option ID, and we populated the option IDs as strings, we expect that variable to have one of the values we choose at design time. The _ value at the end is a fallback one. If none of the above matches, this block of code is executed. It's smart to always leave a fallback here, that calls the stop() function because if someone adds an option and forgets to code a block for it, the game won't block. Tip This function can grow very long in the case of articulated dialogs. The best option is to create private functions in the dialog tree script to isolate particularly long branches. Of course, don't forget to await for them when you write your call! The savvy reader may have understood at this point, how powerful this dialog system is. Since you execute a full script when the user selects an option, the sky is the limit here. You may play animations, populate the inventory, change the game state in different locations, trigger cutscenes (flashbacks?), switch the player character, or do something really strange like saving the game during a dialog (hardly seen in point-and-click games, but why not?). Other engines describe dialogs as declarative, nested lists of lines that the characters can say. Popochiu takes a more dev-oriented road and leaves the developer in total control. We're almost done. Since Popsy wants its toy car, let's make it happy!","title":"Script a dialog"},{"location":"getting-started/creating-a-game-stub/use-inventory-items/","text":"Use inventory items The last common task in an adventure game is to use inventory items. Giving them to characters, combining them together or with elements in the game world. We are going to give the item we collected earlier to our secondary character. This will disable the dialog line forever and remove the item from our inventory. Fortunately, we already have all the elements we need to achieve this. Every Popochiu clickable object (characters, props, hotspots, and inventory items) exposes a function named _on_item_used() , that is invoked by the engine when the player tries to combine an inventory item with that object. Of course, the engine passes the inventory item that the player is using as a parameter so that the target object can react differently to different items. We'll give the toy car to Popsy, so open the script of the secondary character, locate the _on_item_used() function and change it like this: # When the node is clicked and there is an inventory item selected func _on_item_used(item: PopochiuInventoryItem) -> void: if item == I.ToyCar: await C.player.walk_to_clicked() await C.player.face_clicked() await C.player.say(\"Honey, here is your toy car!\") await C.Popsy.say(\"YAY! Thanks a lot!!!\") I.ToyCar.remove() D.PopsyHouseChat.turn_off_options([\"AskBored\"]) Save the script and run the game. Pick the toy car up, select it from the inventory (note how the cursor takes the shape of the item) and click on Popsy. You should see the dialog happen, and the car is removed from your inventory. Congratulations! You've got to the end of this introductory guide!","title":"Use inventory items"},{"location":"getting-started/creating-a-game-stub/use-inventory-items/#use-inventory-items","text":"The last common task in an adventure game is to use inventory items. Giving them to characters, combining them together or with elements in the game world. We are going to give the item we collected earlier to our secondary character. This will disable the dialog line forever and remove the item from our inventory. Fortunately, we already have all the elements we need to achieve this. Every Popochiu clickable object (characters, props, hotspots, and inventory items) exposes a function named _on_item_used() , that is invoked by the engine when the player tries to combine an inventory item with that object. Of course, the engine passes the inventory item that the player is using as a parameter so that the target object can react differently to different items. We'll give the toy car to Popsy, so open the script of the secondary character, locate the _on_item_used() function and change it like this: # When the node is clicked and there is an inventory item selected func _on_item_used(item: PopochiuInventoryItem) -> void: if item == I.ToyCar: await C.player.walk_to_clicked() await C.player.face_clicked() await C.player.say(\"Honey, here is your toy car!\") await C.Popsy.say(\"YAY! Thanks a lot!!!\") I.ToyCar.remove() D.PopsyHouseChat.turn_off_options([\"AskBored\"]) Save the script and run the game. Pick the toy car up, select it from the inventory (note how the cursor takes the shape of the item) and click on Popsy. You should see the dialog happen, and the car is removed from your inventory. Congratulations! You've got to the end of this introductory guide!","title":"Use inventory items"},{"location":"how-to-develop-a-game/","text":"","title":"Index"},{"location":"how-to-develop-a-game/adding-sound/","text":"TODO","title":"Adding sound"},{"location":"how-to-develop-a-game/creating-characters/","text":"TODO","title":"Creating characters"},{"location":"how-to-develop-a-game/creating-rooms/","text":"TODO","title":"Creating rooms"},{"location":"how-to-develop-a-game/kickstarting-a-project/","text":"TODO","title":"Kickstarting a project"},{"location":"how-to-develop-a-game/managing-the-inventory/","text":"TODO","title":"Managing the inventory"},{"location":"how-to-develop-a-game/playing-animations/","text":"TODO","title":"Playing animations"},{"location":"how-to-develop-a-game/scripting-interactions/","text":"TODO","title":"Scripting interactions"},{"location":"how-to-develop-a-game/writing-dialogues/","text":"TODO","title":"Writing dialogues"},{"location":"how-to-develop-a-game/advanced-techniques/","text":"","title":"Index"},{"location":"how-to-develop-a-game/advanced-techniques/advanced-animations/","text":"Animation prefixes TODO Triggering events from animations TODO","title":"Advanced animations"},{"location":"how-to-develop-a-game/advanced-techniques/advanced-animations/#animation-prefixes","text":"TODO","title":"Animation prefixes"},{"location":"how-to-develop-a-game/advanced-techniques/advanced-animations/#triggering-events-from-animations","text":"TODO","title":"Triggering events from animations"},{"location":"how-to-develop-a-game/advanced-techniques/character-anti-glide-feature/","text":"Character Anti-Glide Feature Usually, when a character walks, its walking animation is played. The movement of the character though, is totally unrelated from the walking animation being played. It has to do instead with the character's being progressively repositioned by the engine, as it renders frames. Being unrelated, making character movement and its walk animation play well together isn't always easy. One of the most annoying effects while watching walking cycles is the feeling of character gliding, or \"moonwalking\" over the stage. This usually depends on the character's speed being even slightly out of sync with the animation. Under the hood More specifically, this artifact is visible when the character's walking cycle frame rate is significantly lower than the game's frame rate, and the distance traveled by the character between two frames is larger than a single pixel. In high-resolution games with walk animations with lots of frames, it almost goes unnoticed. Low-resolution / pixel-art games usually suffer from this effect way more. Popochiu can eliminate this annoying artifact, by restricting the repositioning of the character only when the the walk animation plays a new frame. The character's movement will be less \"smooth\", but unless the animation is very slow in proportion to the sprite size, it will look way better on screen. Activating anti-glide feature It's as simple as checking the Anti Glide Animation property in the inspector. You can turn it on and off on a per-character basis. This may be useful for those characters that actually have to glide (ghosts, will-o-whisps, etc) or to slide. Known issues and limitations If a character has a single-frame animation for walking, or if it has no animation at all, activating the anti-glide feature will make the character \"teleport\" to the end of its path in a time proportional to the distance.","title":"Character Anti-Glide Feature"},{"location":"how-to-develop-a-game/advanced-techniques/character-anti-glide-feature/#character-anti-glide-feature","text":"Usually, when a character walks, its walking animation is played. The movement of the character though, is totally unrelated from the walking animation being played. It has to do instead with the character's being progressively repositioned by the engine, as it renders frames. Being unrelated, making character movement and its walk animation play well together isn't always easy. One of the most annoying effects while watching walking cycles is the feeling of character gliding, or \"moonwalking\" over the stage. This usually depends on the character's speed being even slightly out of sync with the animation. Under the hood More specifically, this artifact is visible when the character's walking cycle frame rate is significantly lower than the game's frame rate, and the distance traveled by the character between two frames is larger than a single pixel. In high-resolution games with walk animations with lots of frames, it almost goes unnoticed. Low-resolution / pixel-art games usually suffer from this effect way more. Popochiu can eliminate this annoying artifact, by restricting the repositioning of the character only when the the walk animation plays a new frame. The character's movement will be less \"smooth\", but unless the animation is very slow in proportion to the sprite size, it will look way better on screen.","title":"Character Anti-Glide Feature"},{"location":"how-to-develop-a-game/advanced-techniques/character-anti-glide-feature/#activating-anti-glide-feature","text":"It's as simple as checking the Anti Glide Animation property in the inspector. You can turn it on and off on a per-character basis. This may be useful for those characters that actually have to glide (ghosts, will-o-whisps, etc) or to slide.","title":"Activating anti-glide feature"},{"location":"how-to-develop-a-game/advanced-techniques/character-anti-glide-feature/#known-issues-and-limitations","text":"If a character has a single-frame animation for walking, or if it has no animation at all, activating the anti-glide feature will make the character \"teleport\" to the end of its path in a time proportional to the distance.","title":"Known issues and limitations"},{"location":"how-to-develop-a-game/advanced-techniques/character-scaling/","text":"Character Scaling Having all characters of the same size at any point in the game is sometimes not desirable. Unless you develop an isometric game, you may need to make characters bigger or smaller in specific rooms or even change their size as they walk around a specific location. It will apply in particular to: Rooms with background drawn with the use of linear perspective Shrinking and enlarging character like in the vortex scene from Sam and Max: Hit the Road . Popochiu allows you to scale any character either from the inspector or from code, by assigning its scale factor directly. Although this may work for static resizing, from a developer perspective, there is a more convenient way: delegating to a room's regions the task of scaling the character's sprites as they walk into them. Region-base scaling setup Create a new region in the room and add a polygon to it. The polygon should be shaped in a way that covers the area of the background in which you want your character to scale. Once you're done, select your region in the room's scene tree and flag the Scaling property on. Now you can set the Scale Top and Scale Bottom multipliers for the region. Now Popochiu will scale the character linearly, from the bottom-most to the top-most points of the region. If you need the character to be scaled the same across the whole region, just set the same value for Scale Top and Scale Bottom . The Character's scaling and the region scaling factors are independent, so if your character's scale is different than 1 , you have to take it into account while setting the scale for a region, or the character will \"snap\" to a different size when it enters the region. Tip Usually you don't want to upscale your character, because it gives bad results in almost every situation. This is particularly true for pixel art or low-resolution games. There is nothing wrong in doing this if it works for you, but - if you want to play safe - design your game so that the largest scaling factor for a sprite is 1 in every location. Walking between regions You can set more than one scaling region in the same room (for example, one for the foreground and another for a staircase, or a main region for the front of the scene and a single one that goes down a path, far towards the horizon). The region scales the characters as soon as they step into it. If a character exits the region, its default scale is restored, unless he entered another, overlapping scaling region. Very complex perspectives, with paths going back and forth in a way that forces you to split the scaling region into multiple polygons then, will require some overlap between them and some tinkering with scaling factors to find the right behavior. Known issues and limitations Scale can be set only on the vertical axis. So far, Popochiu does not support horizontal scaling . In some scenarios, you can stumble onto odd behaviors. Follow these rules to avoid them: If the region should stretch up to the borders of a walkable area, make it a little wider so the character won't accidentally step out of the region towards the borders, snapping back to its natural scale. Avoid overlapping two regions in a way that allows the character to enter, then exit one region, while staying in the other one. It can trick the engine into thinking it exited both regions and restoring the character's default scale. Avoid setting scaling regions perfectly contained into each other, for the same reason (it's a special case of the above, in fact). If two adjacent scaling regions share their vertical borders, but different vertical sizes, your character will most likely snap to different scaling if it moves across the vertical border. It may require some trial and error to make them fit. If anti-glide animation is turned on, the character will change its size only when a frame if its walking animation is rendered. This is usually the desired behavior, but if you want to achieve a smooth, continuous visual effect, you may have to turn the anti-glide feature off.","title":"Character Scaling"},{"location":"how-to-develop-a-game/advanced-techniques/character-scaling/#character-scaling","text":"Having all characters of the same size at any point in the game is sometimes not desirable. Unless you develop an isometric game, you may need to make characters bigger or smaller in specific rooms or even change their size as they walk around a specific location. It will apply in particular to: Rooms with background drawn with the use of linear perspective Shrinking and enlarging character like in the vortex scene from Sam and Max: Hit the Road . Popochiu allows you to scale any character either from the inspector or from code, by assigning its scale factor directly. Although this may work for static resizing, from a developer perspective, there is a more convenient way: delegating to a room's regions the task of scaling the character's sprites as they walk into them.","title":"Character Scaling"},{"location":"how-to-develop-a-game/advanced-techniques/character-scaling/#region-base-scaling-setup","text":"Create a new region in the room and add a polygon to it. The polygon should be shaped in a way that covers the area of the background in which you want your character to scale. Once you're done, select your region in the room's scene tree and flag the Scaling property on. Now you can set the Scale Top and Scale Bottom multipliers for the region. Now Popochiu will scale the character linearly, from the bottom-most to the top-most points of the region. If you need the character to be scaled the same across the whole region, just set the same value for Scale Top and Scale Bottom . The Character's scaling and the region scaling factors are independent, so if your character's scale is different than 1 , you have to take it into account while setting the scale for a region, or the character will \"snap\" to a different size when it enters the region. Tip Usually you don't want to upscale your character, because it gives bad results in almost every situation. This is particularly true for pixel art or low-resolution games. There is nothing wrong in doing this if it works for you, but - if you want to play safe - design your game so that the largest scaling factor for a sprite is 1 in every location.","title":"Region-base scaling setup"},{"location":"how-to-develop-a-game/advanced-techniques/character-scaling/#walking-between-regions","text":"You can set more than one scaling region in the same room (for example, one for the foreground and another for a staircase, or a main region for the front of the scene and a single one that goes down a path, far towards the horizon). The region scales the characters as soon as they step into it. If a character exits the region, its default scale is restored, unless he entered another, overlapping scaling region. Very complex perspectives, with paths going back and forth in a way that forces you to split the scaling region into multiple polygons then, will require some overlap between them and some tinkering with scaling factors to find the right behavior.","title":"Walking between regions"},{"location":"how-to-develop-a-game/advanced-techniques/character-scaling/#known-issues-and-limitations","text":"Scale can be set only on the vertical axis. So far, Popochiu does not support horizontal scaling . In some scenarios, you can stumble onto odd behaviors. Follow these rules to avoid them: If the region should stretch up to the borders of a walkable area, make it a little wider so the character won't accidentally step out of the region towards the borders, snapping back to its natural scale. Avoid overlapping two regions in a way that allows the character to enter, then exit one region, while staying in the other one. It can trick the engine into thinking it exited both regions and restoring the character's default scale. Avoid setting scaling regions perfectly contained into each other, for the same reason (it's a special case of the above, in fact). If two adjacent scaling regions share their vertical borders, but different vertical sizes, your character will most likely snap to different scaling if it moves across the vertical border. It may require some trial and error to make them fit. If anti-glide animation is turned on, the character will change its size only when a frame if its walking animation is rendered. This is usually the desired behavior, but if you want to achieve a smooth, continuous visual effect, you may have to turn the anti-glide feature off.","title":"Known issues and limitations"},{"location":"how-to-develop-a-game/advanced-techniques/extending-customizing-popochiu/","text":"TODO","title":"Extending customizing popochiu"},{"location":"how-to-develop-a-game/advanced-techniques/game-state-saving-and-loading/","text":"Saving and loading the game state TODO","title":"Game state saving and loading"},{"location":"how-to-develop-a-game/advanced-techniques/game-state-saving-and-loading/#saving-and-loading-the-game-state","text":"TODO","title":"Saving and loading the game state"},{"location":"how-to-develop-a-game/advanced-techniques/guis/","text":"Theming your GUI TODO Creating Custom GUI TODO","title":"Guis"},{"location":"how-to-develop-a-game/advanced-techniques/guis/#theming-your-gui","text":"TODO","title":"Theming your GUI"},{"location":"how-to-develop-a-game/advanced-techniques/guis/#creating-custom-gui","text":"TODO","title":"Creating Custom GUI"},{"location":"how-to-develop-a-game/advanced-techniques/localization/","text":"TODO","title":"Localization"},{"location":"the-editor-handbook/","text":"","title":"Index"},{"location":"the-editor-handbook/editor-settings/","text":"TODO: how to reach the editor settings and set them up","title":"Editor settings"},{"location":"the-editor-handbook/importers/","text":"Aseprite Importers These tools enable a smooth workflow for the creation of graphical elements in the game. The main goal is to integrate with Aseprite in a way that promotes quick iterations, starting from a visual draft and evolving game scripting and graphics together as things take shape. Importers are available for Characters and Rooms , allowing an almost one-click creation of the complete room structure. Next releases will introduce an Importer for Inventory items too. Basics The plugin works by reading tags from a properly organized Aseprite source file and using that information to populate the target Popochiu Object in a single pass. The result of the process differs depending on the target object type: For Characters , every tag represents a specific animation (ex. the talk animation), and when applicable, the animation direction (ex. up, down, left or right). So in a typical project of medium size, there will be specific tags for talk up , talk down , walk left , walk right , and so on, plus very specific tags for special cutscene animations ( eat multifolded pizza , brush alien dog hair , jump across cakes chasm , etc). For Rooms , every tag represents a Prop and for each tag, a new prop with its own animation is created and populated by the appropriate animation (or sprite). Background and foreground elements are props, of course, and it will be possible to configure each prop visibility and clickability at import. Despite having slightly different outputs, the structure of a Character's or Room's Aseprite source file is basically the same. Let's see examples for both. Aseprite file organization Please take a look at the following image: First notable thing is, a single file contains all animations for the character, identified by tags ( marker 1 ). Each tag will be used to create a single animation, named after the tag, for the Character. Under the hood Popochiu Characters already embed a Sprite2D and an AnimationPlayer. The whole spritesheet is assigned as texture to the Sprite2D and every tag becomes a configured animation in the AnimationPlayer - even the single-sprite ones. They are then accessible by specific methods on the Character, as explained below. Your file can also be organized in layers ( marker 2 ). Layer names are completely up to you and you may create as many as you like. The importer has an option to import only visible layers, that's useful if you have reference or background layers that you don't want to be part of your sprite. Layers are particularly useful in Rooms source files, because without them, isolating props tend to become pretty messy. Take a look at the following example. To keep different props apart, the image is organized in layers ( marker 1 ). In the specific case, layer names and tag names match, but you can of course have situations where more than one layer is necessary to render a specific tag (it's pretty common really); a typical example is the background: in the example above, we could have decided to have the trees on the background prop. The resulting Aseprite file would have looked like this then: Notice how the Tree tag disappeared and the Tree layer is now present with the Background one in the Background tag. On the other hand, you can have tags with many frames on the same layer. This is the most common case because you often wants your props to be animated, like in the case of our crackling bonefire (see marker 2 in the image above): Here we have an isolated fire, composed by 4 frames, all grouped by the proper tag. Basically all combinations of layers and frames are allowed: what you see in a specific animation if you play the tag in Aseprite, will be imported as is in the Prop. Note Observant readers will have noticed that the first frame has no tag and of course, despite including all \"props\", it's not animated. Indeed it is there just as a reference frame for the artist to paint \"in place\". You may have as many untagged frames as you wont in your Room source files: they will be ignored by the importer and will never land into your Popochiu project. This makes things very convenient when composing the scene. Under the hood As for Popochiu Characters, every Prop comes with a bundled Sprite2D and a dedicated AnimationPlayer. Each tag will be extracted as a spritesheet and imported as a single animation. Yes , this may seem overkill but this setup common to Props and Characters allows for easier maintenance and is there to support more functions in the future. Note Even more observant readers will also have realized at this point, that by how things work, each prop sprite will be the size of the whole scene. That's right, but don't be horrified. This approach has a lot of advantages at the sole cost of asking a swift third-millenium game engine to render some more transparent pixels. What we gain is automatic placing of the visual in the scene at import time, and a common rect origin for each prop that will keep baselines and other coordinates consistent among them in the same scene. Back to the tags: you can name them whatever you want, but to get the most out of this functionality, stick to the following conventions: Case style You can use snake_case or PascalCase to name your tags, as you prefer. They will be converted to snake_case anyway before creating animations. Since this can change in the future, we strongly advise not to rely on case sensitivity to differentiate between animations ! Be explicit. Reserved animation names The engine will automatically recognize the following reserved names and use them properly: idle , walk , talk , grab . All of them take for granted the character is facing right and it will be flipped to the left and used for up and down directions too, unless you don't provide... Directional suffixes The engine supports directional suffixes for eight possible directions (up, up-left, left, down-left, down, etc). The complete list of suffixes is _u , _ur , _r , _dr , _d , _dl , _l , _ul . Every animation you want to create (not just the reserved ones) can be made direction-aware by creating it with the right suffixes. For example, to create a walk animation that supports the four main directions, you create walk_u , walk_d , walk_r and walk_l . If you don't create walk_l , walk_r will be automatically flipped. Note As mentioned the importer will convert every animation name to snake_case . This means that the following tags are all equivalent: talk_u , Talk_u , talkU , TalkU . The good: you can use the style you prefer and directions will be still recognized. The bad: if you have Talk_u and TalkU and they mean different things, you're out of luck. Talk_u and Talku works though. Single-animation file If a file contains no tags, it will be imported as a single animation named default . Multiple source files If you are in the need, you may want to separate your character animations over different source files. This is feasible, but keeping everything in a single file is the best option to speed up development by a great amount. The plugin allows you to set a single source file at a time, so if you have multiple sources, you have to constantly switch between source files, losing your preferences in the process. In addition, you have to trade the ability to reset all animations off for an incremental import (see below). Importer settings The Aseprite Importer exposes its configuration under the Popochiu -> Import sections in both the Editor Settings and the Project Settings . Editor Settings Editor Settings contain those configurations that may change between team members' local development environment, like the Aseprite command path, and/or that are valid across different projects. Enable Aseprite Importer : Allows the user to enable or disable the importer in their editor. Useful to avoid cluttering the inspector or getting errors for those who don't use Aseprite or don't have it available in a specific environment. Note This option is only available starting from Popochiu 2.0. In Popochiu 1.0 the importer can't be disabled. Command Path : This is the single most important setting to make the plugin work. On Windows, this field must contain the full path to Aseprite executable (having the command in PATH won't work due to some Godot limitations on command execution under Windows). In *nix systems (Linux and MacOS), you can choose to provide the Aseprite command (if in PATH ) or the full path, as you prefer. Anyway, the plugin will check for the correct execution of the command before initializing itself. If something goes wrong, the output panel will give useful information to fix the problem. Remove JSON file When Aseprite is invoked by the importing procedure, it generates a JSON file with metadata that is necessary to complete the job, alongside the spritesheet PNG file. This file is then useless and can be safely erased, most of all if you are versioning your code (you are, aren't you?!). If for some reason you want to keep the output file, just unflag this setting. Note In Popochiu 1.x for Godot 3, all these settings are found under \"Project Settings\" (see below). Project Settings Among the Project Settings you'll find those you may want to share with your team, and that mostly impact the importing workflow, setting defaults shared by every instance of the plugin. Note Since Godot 4, Project Settings have an \"Advanced Settings\" filter. Plugins can't declare their settings as basic , so please make sure you have the upper left toggle activated or you won't see Popochiu's settings section. Import Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want it imported or not. This is useful if you have half-baked animations or reference tags of some sort. When this setting is flagged, all new animations in the list will be automatically flagged as \"to be imported\". When this setting is off, they will be flagged as \"not to be imported\". Loop Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want that animation to loop or if it has to be run a single time. Animations like talk or walk are usually looping, but animations specific for cutscenes or special cases may be single runs. When this setting is flagged, all new animations in the list will be automatically flagged as \"looping\". When this setting is off, they will be flagged as \"non-looping\". New Props Visible by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be created visible, or invisible (useful for props that have to be shown only at certain conditions). When this setting is flagged, all elements in the list will be automatically flagged as \"visible\". When this setting is off, they will be flagged as \"hidden\". New Props Clickable by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be interactive, or non-interactive. When this setting is flagged, all elements in the list will be automatically flagged as \"interactive\". When this setting is off, they will be flagged as \"non-interactive\". Wipe old Animations : This is the default value for the option with the same name that appears in the importer interface (see below for more information). Set this as you prefer so you don't have to do it all the times, depending on your workflow. Importer interface The importer will show a slighlty different interface depending on the target Popochiu Object. The following sections show examples for both Characters and Rooms, highlighting the small differences. Opening the Importer The Character importer tool is visible in the inspector, when you select a PopochiuCharacter object, opening the related scene. You will not see the importer when you select a character instance in a specific room. To see the importer, you must open the character scene and select its root node. Likewise, a Room importer is shown in the Room inspector, when you select the root node of an open Room scene. Note If any error occurs when the plugin starts (for example if there are problems with the Aseprite command or missing dependencies in the scene tree), a warning will be visualized in place of the plugin. Head to the Output Panel to learn how to fix the error. Note If you select a proper target node and no \"Aseprite\" section is shown in the inspector, maybe the functionality is disabled. Chech that Popochiu -> Importer -> Enable Aseprite Importer option is flagged in the Editor Settings . Using the Importer When you select a PopochiuCharacter node, you should see this interface in the node inspector, right after the script variables section: Use Aseprite file field ( 1 ) to select the source file. When you do this, the plugin automatically scans the file and lists every tag found ( 2 ) (or none if the file is a single animation with no tags). For each tag that is found and listed, two flags are available ( 3 ): Import this animation and Set the animation as looping . Deactivating them can prevent a specific animation to be imported or set the animation as a single-run. For PopochiuRoom node, the interface is only slightly different, showing two more flags for each tag ( 1 below): This prop will be visible and This prop will be clickable flags will make the imported prop visible and interactive, respectively. Note Visibility and clickability can both be set at a later stage via script or interface, but these settings allow a one-time setting for frequent, iterative reimporting. Note Visibility and Import flags are not to be confused. You may want to import an invisible prop that will be made visible during the course of the game (think two props for an open and a closed door, that you want to switch based on player's actions). The Rescan button at the top allows you to refresh the tags list if you make any changes. It will be your quick-iteration best friend. Rescanning the tags will not overwrite the preferences you already selected for each tag. It will anyway update the frame count references for each animation, get rid of tags that are no more available, and add new ones. Note You must rescan your source file before reimporting it, if you change the frame count for already available animations, or your imported animations will miss some frames or be all messed-up. In the Options dropdown ( 4 ), you can set some parameters for the importer: Output Folder : This refers to the folder in which the TextureAtlas PNG file will be created. If unset, it defaults to the same folder as the scene (in case of a Room Prop, each atlas will be put into the related prop's folder). This helps in case you want to enforce a specific file structure. Output File Name : If empty, this will default to the Aseprite original source file name. Should you want to select a different file name for your atlas, specify it here. Only visible layers : This flag allows you to ignore hidden layers. Useful if you have reference layers or backgrounds that you don't want to appear in your sprite. Tip Remember to hide reference layers before saving the source file! Wipe old animations : When flagged, all the animations already imported for a Character will be wiped before re-importing them. You typically want to keep this setting flagged when you are iterating over a character's graphics and you want to make sure that if you move or rename animations, every possible leftover is removed and the final result is always coherent with the source file, 1-on-1. You typically want to unflag this when you are working with multiple source files for a single character, and you want to import animation from a file without getting rid of the animations you have already imported before. Beware that animations with the same name will always be overwritten. If you keep this setting unflagged and you have leftover animations saved for a character you will need to remove them by hand. All these preferences are automatically saved with the target PopochiuCharacter or PopochiuRoom node, so they are persisted between sessions, and different for each single element. If for some reason you want to completely reset an Importer anew, just use the Reset preferences button at the very bottom (confirmation required). Importing animations Finally, if everything is set up correctly, you can hit the Import button. The importer will do its magic (beware: very large files with hundreds to thousands of frames will take a while to load, manly due to Aseprite exporting them). When the procedure is over a popup message will report the status and processed tags count. For Characters , you will find all your animations in the AnimationPlayer of your character. All reserved animations ( idle , walk , talk , grab ) will automagically be available in your game and used by the engine. You can use play_animation() method to play any other animation by passing its name (without directional suffixes) as a parameter. For Rooms , you will see a set of props have been created automatically and populated with the correct sprites. If you have animated props (like the fire in this page's example), starting the scene in the player will show the animation running. You can check the animation is correctly looping, if that's the case. Note that existing props with the same name will have their animations seamlessly updated by the procedure, preserving any other properties or configuration they may have. The Room importer is not yet tracing colliders automatically, but each Prop has an embedded polygon. To edit it, select the Prop in the room tree (or in the Popochiu panel room tab) and click the Interaction Polygon button in the toolbar.","title":"Aseprite Importers"},{"location":"the-editor-handbook/importers/#aseprite-importers","text":"These tools enable a smooth workflow for the creation of graphical elements in the game. The main goal is to integrate with Aseprite in a way that promotes quick iterations, starting from a visual draft and evolving game scripting and graphics together as things take shape. Importers are available for Characters and Rooms , allowing an almost one-click creation of the complete room structure. Next releases will introduce an Importer for Inventory items too.","title":"Aseprite Importers"},{"location":"the-editor-handbook/importers/#basics","text":"The plugin works by reading tags from a properly organized Aseprite source file and using that information to populate the target Popochiu Object in a single pass. The result of the process differs depending on the target object type: For Characters , every tag represents a specific animation (ex. the talk animation), and when applicable, the animation direction (ex. up, down, left or right). So in a typical project of medium size, there will be specific tags for talk up , talk down , walk left , walk right , and so on, plus very specific tags for special cutscene animations ( eat multifolded pizza , brush alien dog hair , jump across cakes chasm , etc). For Rooms , every tag represents a Prop and for each tag, a new prop with its own animation is created and populated by the appropriate animation (or sprite). Background and foreground elements are props, of course, and it will be possible to configure each prop visibility and clickability at import. Despite having slightly different outputs, the structure of a Character's or Room's Aseprite source file is basically the same. Let's see examples for both.","title":"Basics"},{"location":"the-editor-handbook/importers/#aseprite-file-organization","text":"Please take a look at the following image: First notable thing is, a single file contains all animations for the character, identified by tags ( marker 1 ). Each tag will be used to create a single animation, named after the tag, for the Character. Under the hood Popochiu Characters already embed a Sprite2D and an AnimationPlayer. The whole spritesheet is assigned as texture to the Sprite2D and every tag becomes a configured animation in the AnimationPlayer - even the single-sprite ones. They are then accessible by specific methods on the Character, as explained below. Your file can also be organized in layers ( marker 2 ). Layer names are completely up to you and you may create as many as you like. The importer has an option to import only visible layers, that's useful if you have reference or background layers that you don't want to be part of your sprite. Layers are particularly useful in Rooms source files, because without them, isolating props tend to become pretty messy. Take a look at the following example. To keep different props apart, the image is organized in layers ( marker 1 ). In the specific case, layer names and tag names match, but you can of course have situations where more than one layer is necessary to render a specific tag (it's pretty common really); a typical example is the background: in the example above, we could have decided to have the trees on the background prop. The resulting Aseprite file would have looked like this then: Notice how the Tree tag disappeared and the Tree layer is now present with the Background one in the Background tag. On the other hand, you can have tags with many frames on the same layer. This is the most common case because you often wants your props to be animated, like in the case of our crackling bonefire (see marker 2 in the image above): Here we have an isolated fire, composed by 4 frames, all grouped by the proper tag. Basically all combinations of layers and frames are allowed: what you see in a specific animation if you play the tag in Aseprite, will be imported as is in the Prop. Note Observant readers will have noticed that the first frame has no tag and of course, despite including all \"props\", it's not animated. Indeed it is there just as a reference frame for the artist to paint \"in place\". You may have as many untagged frames as you wont in your Room source files: they will be ignored by the importer and will never land into your Popochiu project. This makes things very convenient when composing the scene. Under the hood As for Popochiu Characters, every Prop comes with a bundled Sprite2D and a dedicated AnimationPlayer. Each tag will be extracted as a spritesheet and imported as a single animation. Yes , this may seem overkill but this setup common to Props and Characters allows for easier maintenance and is there to support more functions in the future. Note Even more observant readers will also have realized at this point, that by how things work, each prop sprite will be the size of the whole scene. That's right, but don't be horrified. This approach has a lot of advantages at the sole cost of asking a swift third-millenium game engine to render some more transparent pixels. What we gain is automatic placing of the visual in the scene at import time, and a common rect origin for each prop that will keep baselines and other coordinates consistent among them in the same scene. Back to the tags: you can name them whatever you want, but to get the most out of this functionality, stick to the following conventions:","title":"Aseprite file organization"},{"location":"the-editor-handbook/importers/#case-style","text":"You can use snake_case or PascalCase to name your tags, as you prefer. They will be converted to snake_case anyway before creating animations. Since this can change in the future, we strongly advise not to rely on case sensitivity to differentiate between animations ! Be explicit.","title":"Case style"},{"location":"the-editor-handbook/importers/#reserved-animation-names","text":"The engine will automatically recognize the following reserved names and use them properly: idle , walk , talk , grab . All of them take for granted the character is facing right and it will be flipped to the left and used for up and down directions too, unless you don't provide...","title":"Reserved animation names"},{"location":"the-editor-handbook/importers/#directional-suffixes","text":"The engine supports directional suffixes for eight possible directions (up, up-left, left, down-left, down, etc). The complete list of suffixes is _u , _ur , _r , _dr , _d , _dl , _l , _ul . Every animation you want to create (not just the reserved ones) can be made direction-aware by creating it with the right suffixes. For example, to create a walk animation that supports the four main directions, you create walk_u , walk_d , walk_r and walk_l . If you don't create walk_l , walk_r will be automatically flipped. Note As mentioned the importer will convert every animation name to snake_case . This means that the following tags are all equivalent: talk_u , Talk_u , talkU , TalkU . The good: you can use the style you prefer and directions will be still recognized. The bad: if you have Talk_u and TalkU and they mean different things, you're out of luck. Talk_u and Talku works though.","title":"Directional suffixes"},{"location":"the-editor-handbook/importers/#single-animation-file","text":"If a file contains no tags, it will be imported as a single animation named default .","title":"Single-animation file"},{"location":"the-editor-handbook/importers/#multiple-source-files","text":"If you are in the need, you may want to separate your character animations over different source files. This is feasible, but keeping everything in a single file is the best option to speed up development by a great amount. The plugin allows you to set a single source file at a time, so if you have multiple sources, you have to constantly switch between source files, losing your preferences in the process. In addition, you have to trade the ability to reset all animations off for an incremental import (see below).","title":"Multiple source files"},{"location":"the-editor-handbook/importers/#importer-settings","text":"The Aseprite Importer exposes its configuration under the Popochiu -> Import sections in both the Editor Settings and the Project Settings .","title":"Importer settings"},{"location":"the-editor-handbook/importers/#editor-settings","text":"Editor Settings contain those configurations that may change between team members' local development environment, like the Aseprite command path, and/or that are valid across different projects. Enable Aseprite Importer : Allows the user to enable or disable the importer in their editor. Useful to avoid cluttering the inspector or getting errors for those who don't use Aseprite or don't have it available in a specific environment. Note This option is only available starting from Popochiu 2.0. In Popochiu 1.0 the importer can't be disabled. Command Path : This is the single most important setting to make the plugin work. On Windows, this field must contain the full path to Aseprite executable (having the command in PATH won't work due to some Godot limitations on command execution under Windows). In *nix systems (Linux and MacOS), you can choose to provide the Aseprite command (if in PATH ) or the full path, as you prefer. Anyway, the plugin will check for the correct execution of the command before initializing itself. If something goes wrong, the output panel will give useful information to fix the problem. Remove JSON file When Aseprite is invoked by the importing procedure, it generates a JSON file with metadata that is necessary to complete the job, alongside the spritesheet PNG file. This file is then useless and can be safely erased, most of all if you are versioning your code (you are, aren't you?!). If for some reason you want to keep the output file, just unflag this setting. Note In Popochiu 1.x for Godot 3, all these settings are found under \"Project Settings\" (see below).","title":"Editor Settings"},{"location":"the-editor-handbook/importers/#project-settings","text":"Among the Project Settings you'll find those you may want to share with your team, and that mostly impact the importing workflow, setting defaults shared by every instance of the plugin. Note Since Godot 4, Project Settings have an \"Advanced Settings\" filter. Plugins can't declare their settings as basic , so please make sure you have the upper left toggle activated or you won't see Popochiu's settings section. Import Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want it imported or not. This is useful if you have half-baked animations or reference tags of some sort. When this setting is flagged, all new animations in the list will be automatically flagged as \"to be imported\". When this setting is off, they will be flagged as \"not to be imported\". Loop Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want that animation to loop or if it has to be run a single time. Animations like talk or walk are usually looping, but animations specific for cutscenes or special cases may be single runs. When this setting is flagged, all new animations in the list will be automatically flagged as \"looping\". When this setting is off, they will be flagged as \"non-looping\". New Props Visible by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be created visible, or invisible (useful for props that have to be shown only at certain conditions). When this setting is flagged, all elements in the list will be automatically flagged as \"visible\". When this setting is off, they will be flagged as \"hidden\". New Props Clickable by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be interactive, or non-interactive. When this setting is flagged, all elements in the list will be automatically flagged as \"interactive\". When this setting is off, they will be flagged as \"non-interactive\". Wipe old Animations : This is the default value for the option with the same name that appears in the importer interface (see below for more information). Set this as you prefer so you don't have to do it all the times, depending on your workflow.","title":"Project Settings"},{"location":"the-editor-handbook/importers/#importer-interface","text":"The importer will show a slighlty different interface depending on the target Popochiu Object. The following sections show examples for both Characters and Rooms, highlighting the small differences.","title":"Importer interface"},{"location":"the-editor-handbook/importers/#opening-the-importer","text":"The Character importer tool is visible in the inspector, when you select a PopochiuCharacter object, opening the related scene. You will not see the importer when you select a character instance in a specific room. To see the importer, you must open the character scene and select its root node. Likewise, a Room importer is shown in the Room inspector, when you select the root node of an open Room scene. Note If any error occurs when the plugin starts (for example if there are problems with the Aseprite command or missing dependencies in the scene tree), a warning will be visualized in place of the plugin. Head to the Output Panel to learn how to fix the error. Note If you select a proper target node and no \"Aseprite\" section is shown in the inspector, maybe the functionality is disabled. Chech that Popochiu -> Importer -> Enable Aseprite Importer option is flagged in the Editor Settings .","title":"Opening the Importer"},{"location":"the-editor-handbook/importers/#using-the-importer","text":"When you select a PopochiuCharacter node, you should see this interface in the node inspector, right after the script variables section: Use Aseprite file field ( 1 ) to select the source file. When you do this, the plugin automatically scans the file and lists every tag found ( 2 ) (or none if the file is a single animation with no tags). For each tag that is found and listed, two flags are available ( 3 ): Import this animation and Set the animation as looping . Deactivating them can prevent a specific animation to be imported or set the animation as a single-run. For PopochiuRoom node, the interface is only slightly different, showing two more flags for each tag ( 1 below): This prop will be visible and This prop will be clickable flags will make the imported prop visible and interactive, respectively. Note Visibility and clickability can both be set at a later stage via script or interface, but these settings allow a one-time setting for frequent, iterative reimporting. Note Visibility and Import flags are not to be confused. You may want to import an invisible prop that will be made visible during the course of the game (think two props for an open and a closed door, that you want to switch based on player's actions). The Rescan button at the top allows you to refresh the tags list if you make any changes. It will be your quick-iteration best friend. Rescanning the tags will not overwrite the preferences you already selected for each tag. It will anyway update the frame count references for each animation, get rid of tags that are no more available, and add new ones. Note You must rescan your source file before reimporting it, if you change the frame count for already available animations, or your imported animations will miss some frames or be all messed-up. In the Options dropdown ( 4 ), you can set some parameters for the importer: Output Folder : This refers to the folder in which the TextureAtlas PNG file will be created. If unset, it defaults to the same folder as the scene (in case of a Room Prop, each atlas will be put into the related prop's folder). This helps in case you want to enforce a specific file structure. Output File Name : If empty, this will default to the Aseprite original source file name. Should you want to select a different file name for your atlas, specify it here. Only visible layers : This flag allows you to ignore hidden layers. Useful if you have reference layers or backgrounds that you don't want to appear in your sprite. Tip Remember to hide reference layers before saving the source file! Wipe old animations : When flagged, all the animations already imported for a Character will be wiped before re-importing them. You typically want to keep this setting flagged when you are iterating over a character's graphics and you want to make sure that if you move or rename animations, every possible leftover is removed and the final result is always coherent with the source file, 1-on-1. You typically want to unflag this when you are working with multiple source files for a single character, and you want to import animation from a file without getting rid of the animations you have already imported before. Beware that animations with the same name will always be overwritten. If you keep this setting unflagged and you have leftover animations saved for a character you will need to remove them by hand. All these preferences are automatically saved with the target PopochiuCharacter or PopochiuRoom node, so they are persisted between sessions, and different for each single element. If for some reason you want to completely reset an Importer anew, just use the Reset preferences button at the very bottom (confirmation required).","title":"Using the Importer"},{"location":"the-editor-handbook/importers/#importing-animations","text":"Finally, if everything is set up correctly, you can hit the Import button. The importer will do its magic (beware: very large files with hundreds to thousands of frames will take a while to load, manly due to Aseprite exporting them). When the procedure is over a popup message will report the status and processed tags count. For Characters , you will find all your animations in the AnimationPlayer of your character. All reserved animations ( idle , walk , talk , grab ) will automagically be available in your game and used by the engine. You can use play_animation() method to play any other animation by passing its name (without directional suffixes) as a parameter. For Rooms , you will see a set of props have been created automatically and populated with the correct sprites. If you have animated props (like the fire in this page's example), starting the scene in the player will show the animation running. You can check the animation is correctly looping, if that's the case. Note that existing props with the same name will have their animations seamlessly updated by the procedure, preserving any other properties or configuration they may have. The Room importer is not yet tracing colliders automatically, but each Prop has an embedded polygon. To edit it, select the Prop in the room tree (or in the Popochiu panel room tab) and click the Interaction Polygon button in the toolbar.","title":"Importing animations"},{"location":"the-editor-handbook/interface-overview/","text":"Editor Settings TODO Popochiu dock The core of Popochiu editor functions, this panel allows to navigate the game objects without the need to access the scene tree. TODO complete, fix links Main tab - Used to work with the main Objects of the game: Rooms, Characters, Inventory items, Dialogs. Room tab - Used to work with the Objects of a Room when it is the active scene in the 2D editor. It shows the Props, Hotspots, Walkable areas, and Regions of the room. Audio tab - Used to show the audio clips that can be played in the game. They are grouped in Music, Sound effects, Voices, and Graphic interface. Settings - Used to modify properties related to the game behavior. Toolbar buttons TODO Inspectors TODO","title":"Interface overview"},{"location":"the-editor-handbook/interface-overview/#editor-settings","text":"TODO","title":"Editor Settings"},{"location":"the-editor-handbook/interface-overview/#popochiu-dock","text":"The core of Popochiu editor functions, this panel allows to navigate the game objects without the need to access the scene tree. TODO complete, fix links Main tab - Used to work with the main Objects of the game: Rooms, Characters, Inventory items, Dialogs. Room tab - Used to work with the Objects of a Room when it is the active scene in the 2D editor. It shows the Props, Hotspots, Walkable areas, and Regions of the room. Audio tab - Used to show the audio clips that can be played in the game. They are grouped in Music, Sound effects, Voices, and Graphic interface. Settings - Used to modify properties related to the game behavior.","title":"Popochiu dock"},{"location":"the-editor-handbook/interface-overview/#toolbar-buttons","text":"TODO","title":"Toolbar buttons"},{"location":"the-editor-handbook/interface-overview/#inspectors","text":"TODO","title":"Inspectors"},{"location":"the-editor-handbook/popochiu-dock/","text":"The Popochiu dock consists of different tabs, used to group the objects that build the game. Main tab Room tab Audio tab GUI tab TODO: fill all the sections","title":"Popochiu dock"},{"location":"the-editor-handbook/popochiu-dock/#main-tab","text":"","title":"Main tab"},{"location":"the-editor-handbook/popochiu-dock/#room-tab","text":"","title":"Room tab"},{"location":"the-editor-handbook/popochiu-dock/#audio-tab","text":"","title":"Audio tab"},{"location":"the-editor-handbook/popochiu-dock/#gui-tab","text":"TODO: fill all the sections","title":"GUI tab"},{"location":"the-editor-handbook/toolbar-buttons/","text":"TODO: all differet toolbar buttons by popochiu object Character Props ...","title":"Toolbar buttons"},{"location":"the-editor-handbook/toolbar-buttons/#character","text":"","title":"Character"},{"location":"the-editor-handbook/toolbar-buttons/#props","text":"","title":"Props"},{"location":"the-editor-handbook/toolbar-buttons/#_1","text":"","title":"..."},{"location":"the-engine-handbook/","text":"","title":"Index"},{"location":"the-engine-handbook/scripting-overview/","text":"Singletons TODO Where to write game scripts TODO Popochiu Objects state TODO","title":"Scripting overview"},{"location":"the-engine-handbook/scripting-overview/#singletons","text":"TODO","title":"Singletons"},{"location":"the-engine-handbook/scripting-overview/#where-to-write-game-scripts","text":"TODO","title":"Where to write game scripts"},{"location":"the-engine-handbook/scripting-overview/#popochiu-objects-state","text":"TODO","title":"Popochiu Objects state"}]}